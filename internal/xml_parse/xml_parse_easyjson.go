// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package xml_parse

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8d03ee45DecodeXmlParseInternalXmlParseZglv(in *jlexer.Lexer, out *Zglv_p) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VERSION":
			out.VERSION = string(in.String())
		case "DATA":
			out.DATA = string(in.String())
		case "FILENAME":
			out.FILENAME = string(in.String())
		case "FILENAME1":
			out.FILENAME1 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45EncodeXmlParseInternalXmlParseZglv(out *jwriter.Writer, in Zglv_p) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"VERSION\":"
		out.RawString(prefix[1:])
		out.String(string(in.VERSION))
	}
	{
		const prefix string = ",\"DATA\":"
		out.RawString(prefix)
		out.String(string(in.DATA))
	}
	{
		const prefix string = ",\"FILENAME\":"
		out.RawString(prefix)
		out.String(string(in.FILENAME))
	}
	{
		const prefix string = ",\"FILENAME1\":"
		out.RawString(prefix)
		out.String(string(in.FILENAME1))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Zglv_p) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d03ee45EncodeXmlParseInternalXmlParseZglv(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Zglv_p) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d03ee45EncodeXmlParseInternalXmlParseZglv(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Zglv_p) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d03ee45DecodeXmlParseInternalXmlParseZglv(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Zglv_p) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d03ee45DecodeXmlParseInternalXmlParseZglv(l, v)
}
func easyjson8d03ee45DecodeXmlParseInternalXmlParse(in *jlexer.Lexer, out *Zglv) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VERSION":
			out.VERSION = string(in.String())
		case "DATA":
			out.DATA = string(in.String())
		case "FILENAME":
			out.FILENAME = string(in.String())
		case "SD_Z":
			out.SD_Z = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45EncodeXmlParseInternalXmlParse(out *jwriter.Writer, in Zglv) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"VERSION\":"
		out.RawString(prefix[1:])
		out.String(string(in.VERSION))
	}
	{
		const prefix string = ",\"DATA\":"
		out.RawString(prefix)
		out.String(string(in.DATA))
	}
	{
		const prefix string = ",\"FILENAME\":"
		out.RawString(prefix)
		out.String(string(in.FILENAME))
	}
	{
		const prefix string = ",\"SD_Z\":"
		out.RawString(prefix)
		out.String(string(in.SD_Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Zglv) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d03ee45EncodeXmlParseInternalXmlParse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Zglv) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d03ee45EncodeXmlParseInternalXmlParse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Zglv) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d03ee45DecodeXmlParseInternalXmlParse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Zglv) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d03ee45DecodeXmlParseInternalXmlParse(l, v)
}
func easyjson8d03ee45DecodeXmlParseInternalXmlParse1(in *jlexer.Lexer, out *Schet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CODE":
			out.CODE = string(in.String())
		case "CODE_MO":
			out.CODE_MO = string(in.String())
		case "YEAR":
			out.YEAR = string(in.String())
		case "MONTH":
			out.MONTH = string(in.String())
		case "NSCHET":
			out.NSCHET = string(in.String())
		case "DSCHET":
			out.DSCHET = string(in.String())
		case "PLAT":
			out.PLAT = float32(in.Float32())
		case "SUMMAV":
			out.SUMMAV = float32(in.Float32())
		case "COMENTS":
			out.COMENTS = string(in.String())
		case "SUMMAP":
			out.SUMMAP = float32(in.Float32())
		case "SANK_MEK":
			out.SANK_MEK = float32(in.Float32())
		case "SANK_MEE":
			out.SANK_MEE = float32(in.Float32())
		case "SANK_EKMP":
			out.SANK_EKMP = float32(in.Float32())
		case "DISP":
			out.DISP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45EncodeXmlParseInternalXmlParse1(out *jwriter.Writer, in Schet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CODE\":"
		out.RawString(prefix[1:])
		out.String(string(in.CODE))
	}
	{
		const prefix string = ",\"CODE_MO\":"
		out.RawString(prefix)
		out.String(string(in.CODE_MO))
	}
	{
		const prefix string = ",\"YEAR\":"
		out.RawString(prefix)
		out.String(string(in.YEAR))
	}
	{
		const prefix string = ",\"MONTH\":"
		out.RawString(prefix)
		out.String(string(in.MONTH))
	}
	{
		const prefix string = ",\"NSCHET\":"
		out.RawString(prefix)
		out.String(string(in.NSCHET))
	}
	{
		const prefix string = ",\"DSCHET\":"
		out.RawString(prefix)
		out.String(string(in.DSCHET))
	}
	if in.PLAT != 0 {
		const prefix string = ",\"PLAT\":"
		out.RawString(prefix)
		out.Float32(float32(in.PLAT))
	}
	if in.SUMMAV != 0 {
		const prefix string = ",\"SUMMAV\":"
		out.RawString(prefix)
		out.Float32(float32(in.SUMMAV))
	}
	if in.COMENTS != "" {
		const prefix string = ",\"COMENTS\":"
		out.RawString(prefix)
		out.String(string(in.COMENTS))
	}
	if in.SUMMAP != 0 {
		const prefix string = ",\"SUMMAP\":"
		out.RawString(prefix)
		out.Float32(float32(in.SUMMAP))
	}
	if in.SANK_MEK != 0 {
		const prefix string = ",\"SANK_MEK\":"
		out.RawString(prefix)
		out.Float32(float32(in.SANK_MEK))
	}
	if in.SANK_MEE != 0 {
		const prefix string = ",\"SANK_MEE\":"
		out.RawString(prefix)
		out.Float32(float32(in.SANK_MEE))
	}
	if in.SANK_EKMP != 0 {
		const prefix string = ",\"SANK_EKMP\":"
		out.RawString(prefix)
		out.Float32(float32(in.SANK_EKMP))
	}
	if in.DISP != "" {
		const prefix string = ",\"DISP\":"
		out.RawString(prefix)
		out.String(string(in.DISP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Schet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d03ee45EncodeXmlParseInternalXmlParse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Schet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d03ee45EncodeXmlParseInternalXmlParse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Schet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d03ee45DecodeXmlParseInternalXmlParse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Schet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d03ee45DecodeXmlParseInternalXmlParse1(l, v)
}
func easyjson8d03ee45DecodeXmlParseInternalXmlParse2(in *jlexer.Lexer, out *RsFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Rs":
			(out.Rs).UnmarshalEasyJSON(in)
		case "LFile":
			(out.LFile).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45EncodeXmlParseInternalXmlParse2(out *jwriter.Writer, in RsFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Rs\":"
		out.RawString(prefix[1:])
		(in.Rs).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"LFile\":"
		out.RawString(prefix)
		(in.LFile).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RsFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d03ee45EncodeXmlParseInternalXmlParse2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RsFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d03ee45EncodeXmlParseInternalXmlParse2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RsFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d03ee45DecodeXmlParseInternalXmlParse2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RsFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d03ee45DecodeXmlParseInternalXmlParse2(l, v)
}
func easyjson8d03ee45DecodeXmlParseInternalXmlParse3(in *jlexer.Lexer, out *Rs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ZGLV":
			(out.ZGLV).UnmarshalEasyJSON(in)
		case "SCHET":
			(out.SCHET).UnmarshalEasyJSON(in)
		case "ZAP":
			if in.IsNull() {
				in.Skip()
				out.ZAP = nil
			} else {
				in.Delim('[')
				if out.ZAP == nil {
					if !in.IsDelim(']') {
						out.ZAP = make([]struct {
							N_ZAP   string
							PR_NOV  string
							PACIENT Pacient
							Z_SL    []struct {
								IDCASE   string   `xml:",omitempty" json:",omitempty"`
								USL_OK   string   `xml:",omitempty" json:",omitempty"`
								VIDPOM   string   `xml:",omitempty" json:",omitempty"`
								FOR_POM  string   `xml:",omitempty" json:",omitempty"`
								NPR_MO   string   `xml:",omitempty" json:",omitempty"`
								NPR_DATE string   `xml:",omitempty" json:",omitempty"`
								LPU      string   `xml:",omitempty" json:",omitempty"`
								VBR      string   `xml:",omitempty" json:",omitempty"`
								DATE_Z_1 string   `xml:",omitempty" json:",omitempty"`
								DATE_Z_2 string   `xml:",omitempty" json:",omitempty"`
								KD_Z     string   `xml:",omitempty" json:",omitempty"`
								VNOV_M   []string `xml:",omitempty" json:",omitempty"`
								RSLT     string   `xml:",omitempty" json:",omitempty"`
								ISHOD    string   `xml:",omitempty" json:",omitempty"`
								P_OTK    string   `xml:",omitempty" json:",omitempty"`
								RSLT_D   string   `xml:",omitempty" json:",omitempty"`
								OS_SLUCH []string `xml:",omitempty" json:",omitempty"`
								VB_P     string   `xml:",omitempty" json:",omitempty"`
								SL       []struct {
									SL_ID     string
									VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
									METOD_HMP string   `xml:",omitempty" json:",omitempty"`
									LPU_1     string   `xml:",omitempty" json:",omitempty"`
									PODR      string   `xml:",omitempty" json:",omitempty"`
									PROFIL    string   `xml:",omitempty" json:",omitempty"`
									PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
									DET       string   `xml:",omitempty" json:",omitempty"`
									TAL_D     string   `xml:",omitempty" json:",omitempty"`
									TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
									TAL_P     string   `xml:",omitempty" json:",omitempty"`
									P_CEL     string   `xml:",omitempty" json:",omitempty"`
									NHISTORY  string   `xml:",omitempty" json:",omitempty"`
									P_PER     string   `xml:",omitempty" json:",omitempty"`
									DATE_1    string   `xml:",omitempty" json:",omitempty"`
									DATE_2    string   `xml:",omitempty" json:",omitempty"`
									KD        string   `xml:",omitempty" json:",omitempty"`
									DS0       string   `xml:",omitempty" json:",omitempty"`
									DS1       string   `xml:",omitempty" json:",omitempty"`
									DS2       []string `xml:",omitempty" json:",omitempty"`
									DS3       []string `xml:",omitempty" json:",omitempty"`
									C_ZAB     string   `xml:",omitempty" json:",omitempty"`
									DS1_PR    string   `xml:",omitempty" json:",omitempty"`
									DS_ONK    string   `xml:",omitempty" json:",omitempty"`
									PR_D_N    string   `xml:",omitempty" json:",omitempty"`
									DN        string   `xml:",omitempty" json:",omitempty"`
									CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
									CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
									DS2_N     []struct {
										DS2      string `xml:",omitempty" json:",omitempty"`
										DS2_PR   string `xml:",omitempty" json:",omitempty"`
										PR_DS2_N string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									NAZ []struct {
										NAZ_N     string `xml:",omitempty" json:",omitempty"`
										NAZ_R     string `xml:",omitempty" json:",omitempty"`
										NAZ_SP    string `xml:",omitempty" json:",omitempty"`
										NAZ_V     string `xml:",omitempty" json:",omitempty"`
										NAZ_USL   string `xml:",omitempty" json:",omitempty"`
										NAPR_DATE string `xml:",omitempty" json:",omitempty"`
										NAPR_MO   string `xml:",omitempty" json:",omitempty"`
										NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
										NAZ_PK    string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									NAPR []struct {
										NAPR_DATE string `xml:",omitempty" json:",omitempty"`
										NAPR_MO   string `xml:",omitempty" json:",omitempty"`
										NAPR_V    string `xml:",omitempty" json:",omitempty"`
										MET_ISSL  string `xml:",omitempty" json:",omitempty"`
										NAPR_USL  string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									CONS []struct {
										PR_CONS string `xml:",omitempty" json:",omitempty"`
										DT_CONS string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									ONK_SL []struct {
										DS1_T  string `xml:",omitempty" json:",omitempty"`
										STAD   string `xml:",omitempty" json:",omitempty"`
										ONK_T  string `xml:",omitempty" json:",omitempty"`
										ONK_N  string `xml:",omitempty" json:",omitempty"`
										ONK_M  string `xml:",omitempty" json:",omitempty"`
										MTSTZ  string `xml:",omitempty" json:",omitempty"`
										SOD    string `xml:",omitempty" json:",omitempty"`
										K_FR   string `xml:",omitempty" json:",omitempty"`
										WEI    string `xml:",omitempty" json:",omitempty"`
										HEI    string `xml:",omitempty" json:",omitempty"`
										BSA    string `xml:",omitempty" json:",omitempty"`
										B_DIAG []struct {
											DIAG_DATE string `xml:",omitempty" json:",omitempty"`
											DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
											DIAG_CODE string `xml:",omitempty" json:",omitempty"`
											DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
											REC_RSLT  string `xml:",omitempty" json:",omitempty"`
										} `xml:",omitempty" json:",omitempty"`
										B_PROT []struct {
											PROT   string `xml:",omitempty" json:",omitempty"`
											D_PROT string `xml:",omitempty" json:",omitempty"`
										} `xml:",omitempty" json:",omitempty"`
										ONK_USL []struct {
											USL_TIP   string `xml:",omitempty" json:",omitempty"`
											HIR_TIP   string `xml:",omitempty" json:",omitempty"`
											LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
											LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
											LEK_PR    []struct {
												REGNUM   string `xml:",omitempty" json:",omitempty"`
												CODE_SH  string `xml:",omitempty" json:",omitempty"`
												DATE_INJ []string
											} `xml:",omitempty" json:",omitempty"`
										} `xml:",omitempty" json:",omitempty"`
										PPTR     string `xml:",omitempty" json:",omitempty"`
										LUCH_TIP string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									KSG_KPG []struct {
										N_KSG   string `xml:",omitempty" json:",omitempty"`
										VER_KSG string `xml:",omitempty" json:",omitempty"`
										KSG_PG  string `xml:",omitempty" json:",omitempty"`
										N_KPG   string `xml:",omitempty" json:",omitempty"`
										KOEF_Z  string `xml:",omitempty" json:",omitempty"`
										KOEF_UP string `xml:",omitempty" json:",omitempty"`
										BZTSZ   string `xml:",omitempty" json:",omitempty"`
										KOEF_D  string `xml:",omitempty" json:",omitempty"`
										KOEF_U  string `xml:",omitempty" json:",omitempty"`
										CRIT    []string
										SL_K    string `xml:",omitempty" json:",omitempty"`
										IT_SL   string `xml:",omitempty" json:",omitempty"`
										SL_KOEF []struct {
											IDSL string `xml:",omitempty" json:",omitempty"`
											Z_SL string `xml:",omitempty" json:",omitempty"`
										} `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									REAB      string  `xml:",omitempty" json:",omitempty"`
									PRVS      string  `xml:",omitempty" json:",omitempty"`
									VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
									IDDOKT    string  `xml:",omitempty" json:",omitempty"`
									ED_COL    string  `xml:",omitempty" json:",omitempty"`
									TARIF     float32 `xml:",omitempty" json:",omitempty"`
									SUM_M     float32
									USL       []struct {
										IDSERV   string  `xml:",omitempty" json:",omitempty"`
										LPU      string  `xml:",omitempty" json:",omitempty"`
										LPU_1    string  `xml:",omitempty" json:",omitempty"`
										PODR     string  `xml:",omitempty" json:",omitempty"`
										PROFIL   string  `xml:",omitempty" json:",omitempty"`
										VID_VME  string  `xml:",omitempty" json:",omitempty"`
										DET      string  `xml:",omitempty" json:",omitempty"`
										DATE_IN  string  `xml:",omitempty" json:",omitempty"`
										DATE_OUT string  `xml:",omitempty" json:",omitempty"`
										DS       string  `xml:",omitempty" json:",omitempty"`
										P_OTK    string  `xml:",omitempty" json:",omitempty"`
										CODE_USL string  `xml:",omitempty" json:",omitempty"`
										KOL_USL  string  `xml:",omitempty" json:",omitempty"`
										TARIF    float32 `xml:",omitempty" json:",omitempty"`
										SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
										PRVS     string  `xml:",omitempty" json:",omitempty"`
										CODE_MD  string  `xml:",omitempty" json:",omitempty"`
										NPL      string  `xml:",omitempty" json:",omitempty"`
										COMENTU  string  `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									COMENTSL string `xml:",omitempty" json:",omitempty"`
								}
								IDSP   string  `xml:",omitempty" json:",omitempty"`
								SUMV   float32 `xml:",omitempty" json:",omitempty"`
								OPLATA string  `xml:",omitempty" json:",omitempty"`
								SUMP   float32 `xml:",omitempty" json:",omitempty"`
								SANK   []struct {
									S_CODE   string  `xml:",omitempty" json:",omitempty"`
									S_SUM    float32 `xml:",omitempty" json:",omitempty"`
									S_TIP    string  `xml:",omitempty" json:",omitempty"`
									SL_ID    string  `xml:",omitempty" json:",omitempty"`
									S_OSN    string  `xml:",omitempty" json:",omitempty"`
									DATE_ACT string  `xml:",omitempty" json:",omitempty"`
									NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
									CODE_EXP string  `xml:",omitempty" json:",omitempty"`
									S_COM    string  `xml:",omitempty" json:",omitempty"`
									S_IST    string  `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								SANK_IT string `xml:",omitempty" json:",omitempty"`
							}
						}, 0, 0)
					} else {
						out.ZAP = []struct {
							N_ZAP   string
							PR_NOV  string
							PACIENT Pacient
							Z_SL    []struct {
								IDCASE   string   `xml:",omitempty" json:",omitempty"`
								USL_OK   string   `xml:",omitempty" json:",omitempty"`
								VIDPOM   string   `xml:",omitempty" json:",omitempty"`
								FOR_POM  string   `xml:",omitempty" json:",omitempty"`
								NPR_MO   string   `xml:",omitempty" json:",omitempty"`
								NPR_DATE string   `xml:",omitempty" json:",omitempty"`
								LPU      string   `xml:",omitempty" json:",omitempty"`
								VBR      string   `xml:",omitempty" json:",omitempty"`
								DATE_Z_1 string   `xml:",omitempty" json:",omitempty"`
								DATE_Z_2 string   `xml:",omitempty" json:",omitempty"`
								KD_Z     string   `xml:",omitempty" json:",omitempty"`
								VNOV_M   []string `xml:",omitempty" json:",omitempty"`
								RSLT     string   `xml:",omitempty" json:",omitempty"`
								ISHOD    string   `xml:",omitempty" json:",omitempty"`
								P_OTK    string   `xml:",omitempty" json:",omitempty"`
								RSLT_D   string   `xml:",omitempty" json:",omitempty"`
								OS_SLUCH []string `xml:",omitempty" json:",omitempty"`
								VB_P     string   `xml:",omitempty" json:",omitempty"`
								SL       []struct {
									SL_ID     string
									VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
									METOD_HMP string   `xml:",omitempty" json:",omitempty"`
									LPU_1     string   `xml:",omitempty" json:",omitempty"`
									PODR      string   `xml:",omitempty" json:",omitempty"`
									PROFIL    string   `xml:",omitempty" json:",omitempty"`
									PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
									DET       string   `xml:",omitempty" json:",omitempty"`
									TAL_D     string   `xml:",omitempty" json:",omitempty"`
									TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
									TAL_P     string   `xml:",omitempty" json:",omitempty"`
									P_CEL     string   `xml:",omitempty" json:",omitempty"`
									NHISTORY  string   `xml:",omitempty" json:",omitempty"`
									P_PER     string   `xml:",omitempty" json:",omitempty"`
									DATE_1    string   `xml:",omitempty" json:",omitempty"`
									DATE_2    string   `xml:",omitempty" json:",omitempty"`
									KD        string   `xml:",omitempty" json:",omitempty"`
									DS0       string   `xml:",omitempty" json:",omitempty"`
									DS1       string   `xml:",omitempty" json:",omitempty"`
									DS2       []string `xml:",omitempty" json:",omitempty"`
									DS3       []string `xml:",omitempty" json:",omitempty"`
									C_ZAB     string   `xml:",omitempty" json:",omitempty"`
									DS1_PR    string   `xml:",omitempty" json:",omitempty"`
									DS_ONK    string   `xml:",omitempty" json:",omitempty"`
									PR_D_N    string   `xml:",omitempty" json:",omitempty"`
									DN        string   `xml:",omitempty" json:",omitempty"`
									CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
									CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
									DS2_N     []struct {
										DS2      string `xml:",omitempty" json:",omitempty"`
										DS2_PR   string `xml:",omitempty" json:",omitempty"`
										PR_DS2_N string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									NAZ []struct {
										NAZ_N     string `xml:",omitempty" json:",omitempty"`
										NAZ_R     string `xml:",omitempty" json:",omitempty"`
										NAZ_SP    string `xml:",omitempty" json:",omitempty"`
										NAZ_V     string `xml:",omitempty" json:",omitempty"`
										NAZ_USL   string `xml:",omitempty" json:",omitempty"`
										NAPR_DATE string `xml:",omitempty" json:",omitempty"`
										NAPR_MO   string `xml:",omitempty" json:",omitempty"`
										NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
										NAZ_PK    string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									NAPR []struct {
										NAPR_DATE string `xml:",omitempty" json:",omitempty"`
										NAPR_MO   string `xml:",omitempty" json:",omitempty"`
										NAPR_V    string `xml:",omitempty" json:",omitempty"`
										MET_ISSL  string `xml:",omitempty" json:",omitempty"`
										NAPR_USL  string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									CONS []struct {
										PR_CONS string `xml:",omitempty" json:",omitempty"`
										DT_CONS string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									ONK_SL []struct {
										DS1_T  string `xml:",omitempty" json:",omitempty"`
										STAD   string `xml:",omitempty" json:",omitempty"`
										ONK_T  string `xml:",omitempty" json:",omitempty"`
										ONK_N  string `xml:",omitempty" json:",omitempty"`
										ONK_M  string `xml:",omitempty" json:",omitempty"`
										MTSTZ  string `xml:",omitempty" json:",omitempty"`
										SOD    string `xml:",omitempty" json:",omitempty"`
										K_FR   string `xml:",omitempty" json:",omitempty"`
										WEI    string `xml:",omitempty" json:",omitempty"`
										HEI    string `xml:",omitempty" json:",omitempty"`
										BSA    string `xml:",omitempty" json:",omitempty"`
										B_DIAG []struct {
											DIAG_DATE string `xml:",omitempty" json:",omitempty"`
											DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
											DIAG_CODE string `xml:",omitempty" json:",omitempty"`
											DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
											REC_RSLT  string `xml:",omitempty" json:",omitempty"`
										} `xml:",omitempty" json:",omitempty"`
										B_PROT []struct {
											PROT   string `xml:",omitempty" json:",omitempty"`
											D_PROT string `xml:",omitempty" json:",omitempty"`
										} `xml:",omitempty" json:",omitempty"`
										ONK_USL []struct {
											USL_TIP   string `xml:",omitempty" json:",omitempty"`
											HIR_TIP   string `xml:",omitempty" json:",omitempty"`
											LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
											LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
											LEK_PR    []struct {
												REGNUM   string `xml:",omitempty" json:",omitempty"`
												CODE_SH  string `xml:",omitempty" json:",omitempty"`
												DATE_INJ []string
											} `xml:",omitempty" json:",omitempty"`
										} `xml:",omitempty" json:",omitempty"`
										PPTR     string `xml:",omitempty" json:",omitempty"`
										LUCH_TIP string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									KSG_KPG []struct {
										N_KSG   string `xml:",omitempty" json:",omitempty"`
										VER_KSG string `xml:",omitempty" json:",omitempty"`
										KSG_PG  string `xml:",omitempty" json:",omitempty"`
										N_KPG   string `xml:",omitempty" json:",omitempty"`
										KOEF_Z  string `xml:",omitempty" json:",omitempty"`
										KOEF_UP string `xml:",omitempty" json:",omitempty"`
										BZTSZ   string `xml:",omitempty" json:",omitempty"`
										KOEF_D  string `xml:",omitempty" json:",omitempty"`
										KOEF_U  string `xml:",omitempty" json:",omitempty"`
										CRIT    []string
										SL_K    string `xml:",omitempty" json:",omitempty"`
										IT_SL   string `xml:",omitempty" json:",omitempty"`
										SL_KOEF []struct {
											IDSL string `xml:",omitempty" json:",omitempty"`
											Z_SL string `xml:",omitempty" json:",omitempty"`
										} `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									REAB      string  `xml:",omitempty" json:",omitempty"`
									PRVS      string  `xml:",omitempty" json:",omitempty"`
									VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
									IDDOKT    string  `xml:",omitempty" json:",omitempty"`
									ED_COL    string  `xml:",omitempty" json:",omitempty"`
									TARIF     float32 `xml:",omitempty" json:",omitempty"`
									SUM_M     float32
									USL       []struct {
										IDSERV   string  `xml:",omitempty" json:",omitempty"`
										LPU      string  `xml:",omitempty" json:",omitempty"`
										LPU_1    string  `xml:",omitempty" json:",omitempty"`
										PODR     string  `xml:",omitempty" json:",omitempty"`
										PROFIL   string  `xml:",omitempty" json:",omitempty"`
										VID_VME  string  `xml:",omitempty" json:",omitempty"`
										DET      string  `xml:",omitempty" json:",omitempty"`
										DATE_IN  string  `xml:",omitempty" json:",omitempty"`
										DATE_OUT string  `xml:",omitempty" json:",omitempty"`
										DS       string  `xml:",omitempty" json:",omitempty"`
										P_OTK    string  `xml:",omitempty" json:",omitempty"`
										CODE_USL string  `xml:",omitempty" json:",omitempty"`
										KOL_USL  string  `xml:",omitempty" json:",omitempty"`
										TARIF    float32 `xml:",omitempty" json:",omitempty"`
										SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
										PRVS     string  `xml:",omitempty" json:",omitempty"`
										CODE_MD  string  `xml:",omitempty" json:",omitempty"`
										NPL      string  `xml:",omitempty" json:",omitempty"`
										COMENTU  string  `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									COMENTSL string `xml:",omitempty" json:",omitempty"`
								}
								IDSP   string  `xml:",omitempty" json:",omitempty"`
								SUMV   float32 `xml:",omitempty" json:",omitempty"`
								OPLATA string  `xml:",omitempty" json:",omitempty"`
								SUMP   float32 `xml:",omitempty" json:",omitempty"`
								SANK   []struct {
									S_CODE   string  `xml:",omitempty" json:",omitempty"`
									S_SUM    float32 `xml:",omitempty" json:",omitempty"`
									S_TIP    string  `xml:",omitempty" json:",omitempty"`
									SL_ID    string  `xml:",omitempty" json:",omitempty"`
									S_OSN    string  `xml:",omitempty" json:",omitempty"`
									DATE_ACT string  `xml:",omitempty" json:",omitempty"`
									NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
									CODE_EXP string  `xml:",omitempty" json:",omitempty"`
									S_COM    string  `xml:",omitempty" json:",omitempty"`
									S_IST    string  `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								SANK_IT string `xml:",omitempty" json:",omitempty"`
							}
						}{}
					}
				} else {
					out.ZAP = (out.ZAP)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						N_ZAP   string
						PR_NOV  string
						PACIENT Pacient
						Z_SL    []struct {
							IDCASE   string   `xml:",omitempty" json:",omitempty"`
							USL_OK   string   `xml:",omitempty" json:",omitempty"`
							VIDPOM   string   `xml:",omitempty" json:",omitempty"`
							FOR_POM  string   `xml:",omitempty" json:",omitempty"`
							NPR_MO   string   `xml:",omitempty" json:",omitempty"`
							NPR_DATE string   `xml:",omitempty" json:",omitempty"`
							LPU      string   `xml:",omitempty" json:",omitempty"`
							VBR      string   `xml:",omitempty" json:",omitempty"`
							DATE_Z_1 string   `xml:",omitempty" json:",omitempty"`
							DATE_Z_2 string   `xml:",omitempty" json:",omitempty"`
							KD_Z     string   `xml:",omitempty" json:",omitempty"`
							VNOV_M   []string `xml:",omitempty" json:",omitempty"`
							RSLT     string   `xml:",omitempty" json:",omitempty"`
							ISHOD    string   `xml:",omitempty" json:",omitempty"`
							P_OTK    string   `xml:",omitempty" json:",omitempty"`
							RSLT_D   string   `xml:",omitempty" json:",omitempty"`
							OS_SLUCH []string `xml:",omitempty" json:",omitempty"`
							VB_P     string   `xml:",omitempty" json:",omitempty"`
							SL       []struct {
								SL_ID     string
								VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
								METOD_HMP string   `xml:",omitempty" json:",omitempty"`
								LPU_1     string   `xml:",omitempty" json:",omitempty"`
								PODR      string   `xml:",omitempty" json:",omitempty"`
								PROFIL    string   `xml:",omitempty" json:",omitempty"`
								PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
								DET       string   `xml:",omitempty" json:",omitempty"`
								TAL_D     string   `xml:",omitempty" json:",omitempty"`
								TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
								TAL_P     string   `xml:",omitempty" json:",omitempty"`
								P_CEL     string   `xml:",omitempty" json:",omitempty"`
								NHISTORY  string   `xml:",omitempty" json:",omitempty"`
								P_PER     string   `xml:",omitempty" json:",omitempty"`
								DATE_1    string   `xml:",omitempty" json:",omitempty"`
								DATE_2    string   `xml:",omitempty" json:",omitempty"`
								KD        string   `xml:",omitempty" json:",omitempty"`
								DS0       string   `xml:",omitempty" json:",omitempty"`
								DS1       string   `xml:",omitempty" json:",omitempty"`
								DS2       []string `xml:",omitempty" json:",omitempty"`
								DS3       []string `xml:",omitempty" json:",omitempty"`
								C_ZAB     string   `xml:",omitempty" json:",omitempty"`
								DS1_PR    string   `xml:",omitempty" json:",omitempty"`
								DS_ONK    string   `xml:",omitempty" json:",omitempty"`
								PR_D_N    string   `xml:",omitempty" json:",omitempty"`
								DN        string   `xml:",omitempty" json:",omitempty"`
								CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
								CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
								DS2_N     []struct {
									DS2      string `xml:",omitempty" json:",omitempty"`
									DS2_PR   string `xml:",omitempty" json:",omitempty"`
									PR_DS2_N string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								NAZ []struct {
									NAZ_N     string `xml:",omitempty" json:",omitempty"`
									NAZ_R     string `xml:",omitempty" json:",omitempty"`
									NAZ_SP    string `xml:",omitempty" json:",omitempty"`
									NAZ_V     string `xml:",omitempty" json:",omitempty"`
									NAZ_USL   string `xml:",omitempty" json:",omitempty"`
									NAPR_DATE string `xml:",omitempty" json:",omitempty"`
									NAPR_MO   string `xml:",omitempty" json:",omitempty"`
									NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
									NAZ_PK    string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								NAPR []struct {
									NAPR_DATE string `xml:",omitempty" json:",omitempty"`
									NAPR_MO   string `xml:",omitempty" json:",omitempty"`
									NAPR_V    string `xml:",omitempty" json:",omitempty"`
									MET_ISSL  string `xml:",omitempty" json:",omitempty"`
									NAPR_USL  string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								CONS []struct {
									PR_CONS string `xml:",omitempty" json:",omitempty"`
									DT_CONS string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								ONK_SL []struct {
									DS1_T  string `xml:",omitempty" json:",omitempty"`
									STAD   string `xml:",omitempty" json:",omitempty"`
									ONK_T  string `xml:",omitempty" json:",omitempty"`
									ONK_N  string `xml:",omitempty" json:",omitempty"`
									ONK_M  string `xml:",omitempty" json:",omitempty"`
									MTSTZ  string `xml:",omitempty" json:",omitempty"`
									SOD    string `xml:",omitempty" json:",omitempty"`
									K_FR   string `xml:",omitempty" json:",omitempty"`
									WEI    string `xml:",omitempty" json:",omitempty"`
									HEI    string `xml:",omitempty" json:",omitempty"`
									BSA    string `xml:",omitempty" json:",omitempty"`
									B_DIAG []struct {
										DIAG_DATE string `xml:",omitempty" json:",omitempty"`
										DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
										DIAG_CODE string `xml:",omitempty" json:",omitempty"`
										DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
										REC_RSLT  string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									B_PROT []struct {
										PROT   string `xml:",omitempty" json:",omitempty"`
										D_PROT string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									ONK_USL []struct {
										USL_TIP   string `xml:",omitempty" json:",omitempty"`
										HIR_TIP   string `xml:",omitempty" json:",omitempty"`
										LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
										LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
										LEK_PR    []struct {
											REGNUM   string `xml:",omitempty" json:",omitempty"`
											CODE_SH  string `xml:",omitempty" json:",omitempty"`
											DATE_INJ []string
										} `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									PPTR     string `xml:",omitempty" json:",omitempty"`
									LUCH_TIP string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								KSG_KPG []struct {
									N_KSG   string `xml:",omitempty" json:",omitempty"`
									VER_KSG string `xml:",omitempty" json:",omitempty"`
									KSG_PG  string `xml:",omitempty" json:",omitempty"`
									N_KPG   string `xml:",omitempty" json:",omitempty"`
									KOEF_Z  string `xml:",omitempty" json:",omitempty"`
									KOEF_UP string `xml:",omitempty" json:",omitempty"`
									BZTSZ   string `xml:",omitempty" json:",omitempty"`
									KOEF_D  string `xml:",omitempty" json:",omitempty"`
									KOEF_U  string `xml:",omitempty" json:",omitempty"`
									CRIT    []string
									SL_K    string `xml:",omitempty" json:",omitempty"`
									IT_SL   string `xml:",omitempty" json:",omitempty"`
									SL_KOEF []struct {
										IDSL string `xml:",omitempty" json:",omitempty"`
										Z_SL string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								REAB      string  `xml:",omitempty" json:",omitempty"`
								PRVS      string  `xml:",omitempty" json:",omitempty"`
								VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
								IDDOKT    string  `xml:",omitempty" json:",omitempty"`
								ED_COL    string  `xml:",omitempty" json:",omitempty"`
								TARIF     float32 `xml:",omitempty" json:",omitempty"`
								SUM_M     float32
								USL       []struct {
									IDSERV   string  `xml:",omitempty" json:",omitempty"`
									LPU      string  `xml:",omitempty" json:",omitempty"`
									LPU_1    string  `xml:",omitempty" json:",omitempty"`
									PODR     string  `xml:",omitempty" json:",omitempty"`
									PROFIL   string  `xml:",omitempty" json:",omitempty"`
									VID_VME  string  `xml:",omitempty" json:",omitempty"`
									DET      string  `xml:",omitempty" json:",omitempty"`
									DATE_IN  string  `xml:",omitempty" json:",omitempty"`
									DATE_OUT string  `xml:",omitempty" json:",omitempty"`
									DS       string  `xml:",omitempty" json:",omitempty"`
									P_OTK    string  `xml:",omitempty" json:",omitempty"`
									CODE_USL string  `xml:",omitempty" json:",omitempty"`
									KOL_USL  string  `xml:",omitempty" json:",omitempty"`
									TARIF    float32 `xml:",omitempty" json:",omitempty"`
									SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
									PRVS     string  `xml:",omitempty" json:",omitempty"`
									CODE_MD  string  `xml:",omitempty" json:",omitempty"`
									NPL      string  `xml:",omitempty" json:",omitempty"`
									COMENTU  string  `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								COMENTSL string `xml:",omitempty" json:",omitempty"`
							}
							IDSP   string  `xml:",omitempty" json:",omitempty"`
							SUMV   float32 `xml:",omitempty" json:",omitempty"`
							OPLATA string  `xml:",omitempty" json:",omitempty"`
							SUMP   float32 `xml:",omitempty" json:",omitempty"`
							SANK   []struct {
								S_CODE   string  `xml:",omitempty" json:",omitempty"`
								S_SUM    float32 `xml:",omitempty" json:",omitempty"`
								S_TIP    string  `xml:",omitempty" json:",omitempty"`
								SL_ID    string  `xml:",omitempty" json:",omitempty"`
								S_OSN    string  `xml:",omitempty" json:",omitempty"`
								DATE_ACT string  `xml:",omitempty" json:",omitempty"`
								NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
								CODE_EXP string  `xml:",omitempty" json:",omitempty"`
								S_COM    string  `xml:",omitempty" json:",omitempty"`
								S_IST    string  `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							SANK_IT string `xml:",omitempty" json:",omitempty"`
						}
					}
					easyjson8d03ee45Decode(in, &v1)
					out.ZAP = append(out.ZAP, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45EncodeXmlParseInternalXmlParse3(out *jwriter.Writer, in Rs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ZGLV\":"
		out.RawString(prefix[1:])
		(in.ZGLV).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"SCHET\":"
		out.RawString(prefix)
		(in.SCHET).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ZAP\":"
		out.RawString(prefix)
		if in.ZAP == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.ZAP {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d03ee45EncodeXmlParseInternalXmlParse3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d03ee45EncodeXmlParseInternalXmlParse3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d03ee45DecodeXmlParseInternalXmlParse3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d03ee45DecodeXmlParseInternalXmlParse3(l, v)
}
func easyjson8d03ee45Decode(in *jlexer.Lexer, out *struct {
	N_ZAP   string
	PR_NOV  string
	PACIENT Pacient
	Z_SL    []struct {
		IDCASE   string   `xml:",omitempty" json:",omitempty"`
		USL_OK   string   `xml:",omitempty" json:",omitempty"`
		VIDPOM   string   `xml:",omitempty" json:",omitempty"`
		FOR_POM  string   `xml:",omitempty" json:",omitempty"`
		NPR_MO   string   `xml:",omitempty" json:",omitempty"`
		NPR_DATE string   `xml:",omitempty" json:",omitempty"`
		LPU      string   `xml:",omitempty" json:",omitempty"`
		VBR      string   `xml:",omitempty" json:",omitempty"`
		DATE_Z_1 string   `xml:",omitempty" json:",omitempty"`
		DATE_Z_2 string   `xml:",omitempty" json:",omitempty"`
		KD_Z     string   `xml:",omitempty" json:",omitempty"`
		VNOV_M   []string `xml:",omitempty" json:",omitempty"`
		RSLT     string   `xml:",omitempty" json:",omitempty"`
		ISHOD    string   `xml:",omitempty" json:",omitempty"`
		P_OTK    string   `xml:",omitempty" json:",omitempty"`
		RSLT_D   string   `xml:",omitempty" json:",omitempty"`
		OS_SLUCH []string `xml:",omitempty" json:",omitempty"`
		VB_P     string   `xml:",omitempty" json:",omitempty"`
		SL       []struct {
			SL_ID     string
			VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
			METOD_HMP string   `xml:",omitempty" json:",omitempty"`
			LPU_1     string   `xml:",omitempty" json:",omitempty"`
			PODR      string   `xml:",omitempty" json:",omitempty"`
			PROFIL    string   `xml:",omitempty" json:",omitempty"`
			PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
			DET       string   `xml:",omitempty" json:",omitempty"`
			TAL_D     string   `xml:",omitempty" json:",omitempty"`
			TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
			TAL_P     string   `xml:",omitempty" json:",omitempty"`
			P_CEL     string   `xml:",omitempty" json:",omitempty"`
			NHISTORY  string   `xml:",omitempty" json:",omitempty"`
			P_PER     string   `xml:",omitempty" json:",omitempty"`
			DATE_1    string   `xml:",omitempty" json:",omitempty"`
			DATE_2    string   `xml:",omitempty" json:",omitempty"`
			KD        string   `xml:",omitempty" json:",omitempty"`
			DS0       string   `xml:",omitempty" json:",omitempty"`
			DS1       string   `xml:",omitempty" json:",omitempty"`
			DS2       []string `xml:",omitempty" json:",omitempty"`
			DS3       []string `xml:",omitempty" json:",omitempty"`
			C_ZAB     string   `xml:",omitempty" json:",omitempty"`
			DS1_PR    string   `xml:",omitempty" json:",omitempty"`
			DS_ONK    string   `xml:",omitempty" json:",omitempty"`
			PR_D_N    string   `xml:",omitempty" json:",omitempty"`
			DN        string   `xml:",omitempty" json:",omitempty"`
			CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
			CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
			DS2_N     []struct {
				DS2      string `xml:",omitempty" json:",omitempty"`
				DS2_PR   string `xml:",omitempty" json:",omitempty"`
				PR_DS2_N string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			NAZ []struct {
				NAZ_N     string `xml:",omitempty" json:",omitempty"`
				NAZ_R     string `xml:",omitempty" json:",omitempty"`
				NAZ_SP    string `xml:",omitempty" json:",omitempty"`
				NAZ_V     string `xml:",omitempty" json:",omitempty"`
				NAZ_USL   string `xml:",omitempty" json:",omitempty"`
				NAPR_DATE string `xml:",omitempty" json:",omitempty"`
				NAPR_MO   string `xml:",omitempty" json:",omitempty"`
				NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
				NAZ_PK    string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			NAPR []struct {
				NAPR_DATE string `xml:",omitempty" json:",omitempty"`
				NAPR_MO   string `xml:",omitempty" json:",omitempty"`
				NAPR_V    string `xml:",omitempty" json:",omitempty"`
				MET_ISSL  string `xml:",omitempty" json:",omitempty"`
				NAPR_USL  string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			CONS []struct {
				PR_CONS string `xml:",omitempty" json:",omitempty"`
				DT_CONS string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			ONK_SL []struct {
				DS1_T  string `xml:",omitempty" json:",omitempty"`
				STAD   string `xml:",omitempty" json:",omitempty"`
				ONK_T  string `xml:",omitempty" json:",omitempty"`
				ONK_N  string `xml:",omitempty" json:",omitempty"`
				ONK_M  string `xml:",omitempty" json:",omitempty"`
				MTSTZ  string `xml:",omitempty" json:",omitempty"`
				SOD    string `xml:",omitempty" json:",omitempty"`
				K_FR   string `xml:",omitempty" json:",omitempty"`
				WEI    string `xml:",omitempty" json:",omitempty"`
				HEI    string `xml:",omitempty" json:",omitempty"`
				BSA    string `xml:",omitempty" json:",omitempty"`
				B_DIAG []struct {
					DIAG_DATE string `xml:",omitempty" json:",omitempty"`
					DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
					DIAG_CODE string `xml:",omitempty" json:",omitempty"`
					DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
					REC_RSLT  string `xml:",omitempty" json:",omitempty"`
				} `xml:",omitempty" json:",omitempty"`
				B_PROT []struct {
					PROT   string `xml:",omitempty" json:",omitempty"`
					D_PROT string `xml:",omitempty" json:",omitempty"`
				} `xml:",omitempty" json:",omitempty"`
				ONK_USL []struct {
					USL_TIP   string `xml:",omitempty" json:",omitempty"`
					HIR_TIP   string `xml:",omitempty" json:",omitempty"`
					LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
					LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
					LEK_PR    []struct {
						REGNUM   string `xml:",omitempty" json:",omitempty"`
						CODE_SH  string `xml:",omitempty" json:",omitempty"`
						DATE_INJ []string
					} `xml:",omitempty" json:",omitempty"`
				} `xml:",omitempty" json:",omitempty"`
				PPTR     string `xml:",omitempty" json:",omitempty"`
				LUCH_TIP string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			KSG_KPG []struct {
				N_KSG   string `xml:",omitempty" json:",omitempty"`
				VER_KSG string `xml:",omitempty" json:",omitempty"`
				KSG_PG  string `xml:",omitempty" json:",omitempty"`
				N_KPG   string `xml:",omitempty" json:",omitempty"`
				KOEF_Z  string `xml:",omitempty" json:",omitempty"`
				KOEF_UP string `xml:",omitempty" json:",omitempty"`
				BZTSZ   string `xml:",omitempty" json:",omitempty"`
				KOEF_D  string `xml:",omitempty" json:",omitempty"`
				KOEF_U  string `xml:",omitempty" json:",omitempty"`
				CRIT    []string
				SL_K    string `xml:",omitempty" json:",omitempty"`
				IT_SL   string `xml:",omitempty" json:",omitempty"`
				SL_KOEF []struct {
					IDSL string `xml:",omitempty" json:",omitempty"`
					Z_SL string `xml:",omitempty" json:",omitempty"`
				} `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			REAB      string  `xml:",omitempty" json:",omitempty"`
			PRVS      string  `xml:",omitempty" json:",omitempty"`
			VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
			IDDOKT    string  `xml:",omitempty" json:",omitempty"`
			ED_COL    string  `xml:",omitempty" json:",omitempty"`
			TARIF     float32 `xml:",omitempty" json:",omitempty"`
			SUM_M     float32
			USL       []struct {
				IDSERV   string  `xml:",omitempty" json:",omitempty"`
				LPU      string  `xml:",omitempty" json:",omitempty"`
				LPU_1    string  `xml:",omitempty" json:",omitempty"`
				PODR     string  `xml:",omitempty" json:",omitempty"`
				PROFIL   string  `xml:",omitempty" json:",omitempty"`
				VID_VME  string  `xml:",omitempty" json:",omitempty"`
				DET      string  `xml:",omitempty" json:",omitempty"`
				DATE_IN  string  `xml:",omitempty" json:",omitempty"`
				DATE_OUT string  `xml:",omitempty" json:",omitempty"`
				DS       string  `xml:",omitempty" json:",omitempty"`
				P_OTK    string  `xml:",omitempty" json:",omitempty"`
				CODE_USL string  `xml:",omitempty" json:",omitempty"`
				KOL_USL  string  `xml:",omitempty" json:",omitempty"`
				TARIF    float32 `xml:",omitempty" json:",omitempty"`
				SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
				PRVS     string  `xml:",omitempty" json:",omitempty"`
				CODE_MD  string  `xml:",omitempty" json:",omitempty"`
				NPL      string  `xml:",omitempty" json:",omitempty"`
				COMENTU  string  `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			COMENTSL string `xml:",omitempty" json:",omitempty"`
		}
		IDSP   string  `xml:",omitempty" json:",omitempty"`
		SUMV   float32 `xml:",omitempty" json:",omitempty"`
		OPLATA string  `xml:",omitempty" json:",omitempty"`
		SUMP   float32 `xml:",omitempty" json:",omitempty"`
		SANK   []struct {
			S_CODE   string  `xml:",omitempty" json:",omitempty"`
			S_SUM    float32 `xml:",omitempty" json:",omitempty"`
			S_TIP    string  `xml:",omitempty" json:",omitempty"`
			SL_ID    string  `xml:",omitempty" json:",omitempty"`
			S_OSN    string  `xml:",omitempty" json:",omitempty"`
			DATE_ACT string  `xml:",omitempty" json:",omitempty"`
			NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
			CODE_EXP string  `xml:",omitempty" json:",omitempty"`
			S_COM    string  `xml:",omitempty" json:",omitempty"`
			S_IST    string  `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		SANK_IT string `xml:",omitempty" json:",omitempty"`
	}
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "N_ZAP":
			out.N_ZAP = string(in.String())
		case "PR_NOV":
			out.PR_NOV = string(in.String())
		case "PACIENT":
			(out.PACIENT).UnmarshalEasyJSON(in)
		case "Z_SL":
			if in.IsNull() {
				in.Skip()
				out.Z_SL = nil
			} else {
				in.Delim('[')
				if out.Z_SL == nil {
					if !in.IsDelim(']') {
						out.Z_SL = make([]struct {
							IDCASE   string   `xml:",omitempty" json:",omitempty"`
							USL_OK   string   `xml:",omitempty" json:",omitempty"`
							VIDPOM   string   `xml:",omitempty" json:",omitempty"`
							FOR_POM  string   `xml:",omitempty" json:",omitempty"`
							NPR_MO   string   `xml:",omitempty" json:",omitempty"`
							NPR_DATE string   `xml:",omitempty" json:",omitempty"`
							LPU      string   `xml:",omitempty" json:",omitempty"`
							VBR      string   `xml:",omitempty" json:",omitempty"`
							DATE_Z_1 string   `xml:",omitempty" json:",omitempty"`
							DATE_Z_2 string   `xml:",omitempty" json:",omitempty"`
							KD_Z     string   `xml:",omitempty" json:",omitempty"`
							VNOV_M   []string `xml:",omitempty" json:",omitempty"`
							RSLT     string   `xml:",omitempty" json:",omitempty"`
							ISHOD    string   `xml:",omitempty" json:",omitempty"`
							P_OTK    string   `xml:",omitempty" json:",omitempty"`
							RSLT_D   string   `xml:",omitempty" json:",omitempty"`
							OS_SLUCH []string `xml:",omitempty" json:",omitempty"`
							VB_P     string   `xml:",omitempty" json:",omitempty"`
							SL       []struct {
								SL_ID     string
								VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
								METOD_HMP string   `xml:",omitempty" json:",omitempty"`
								LPU_1     string   `xml:",omitempty" json:",omitempty"`
								PODR      string   `xml:",omitempty" json:",omitempty"`
								PROFIL    string   `xml:",omitempty" json:",omitempty"`
								PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
								DET       string   `xml:",omitempty" json:",omitempty"`
								TAL_D     string   `xml:",omitempty" json:",omitempty"`
								TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
								TAL_P     string   `xml:",omitempty" json:",omitempty"`
								P_CEL     string   `xml:",omitempty" json:",omitempty"`
								NHISTORY  string   `xml:",omitempty" json:",omitempty"`
								P_PER     string   `xml:",omitempty" json:",omitempty"`
								DATE_1    string   `xml:",omitempty" json:",omitempty"`
								DATE_2    string   `xml:",omitempty" json:",omitempty"`
								KD        string   `xml:",omitempty" json:",omitempty"`
								DS0       string   `xml:",omitempty" json:",omitempty"`
								DS1       string   `xml:",omitempty" json:",omitempty"`
								DS2       []string `xml:",omitempty" json:",omitempty"`
								DS3       []string `xml:",omitempty" json:",omitempty"`
								C_ZAB     string   `xml:",omitempty" json:",omitempty"`
								DS1_PR    string   `xml:",omitempty" json:",omitempty"`
								DS_ONK    string   `xml:",omitempty" json:",omitempty"`
								PR_D_N    string   `xml:",omitempty" json:",omitempty"`
								DN        string   `xml:",omitempty" json:",omitempty"`
								CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
								CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
								DS2_N     []struct {
									DS2      string `xml:",omitempty" json:",omitempty"`
									DS2_PR   string `xml:",omitempty" json:",omitempty"`
									PR_DS2_N string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								NAZ []struct {
									NAZ_N     string `xml:",omitempty" json:",omitempty"`
									NAZ_R     string `xml:",omitempty" json:",omitempty"`
									NAZ_SP    string `xml:",omitempty" json:",omitempty"`
									NAZ_V     string `xml:",omitempty" json:",omitempty"`
									NAZ_USL   string `xml:",omitempty" json:",omitempty"`
									NAPR_DATE string `xml:",omitempty" json:",omitempty"`
									NAPR_MO   string `xml:",omitempty" json:",omitempty"`
									NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
									NAZ_PK    string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								NAPR []struct {
									NAPR_DATE string `xml:",omitempty" json:",omitempty"`
									NAPR_MO   string `xml:",omitempty" json:",omitempty"`
									NAPR_V    string `xml:",omitempty" json:",omitempty"`
									MET_ISSL  string `xml:",omitempty" json:",omitempty"`
									NAPR_USL  string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								CONS []struct {
									PR_CONS string `xml:",omitempty" json:",omitempty"`
									DT_CONS string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								ONK_SL []struct {
									DS1_T  string `xml:",omitempty" json:",omitempty"`
									STAD   string `xml:",omitempty" json:",omitempty"`
									ONK_T  string `xml:",omitempty" json:",omitempty"`
									ONK_N  string `xml:",omitempty" json:",omitempty"`
									ONK_M  string `xml:",omitempty" json:",omitempty"`
									MTSTZ  string `xml:",omitempty" json:",omitempty"`
									SOD    string `xml:",omitempty" json:",omitempty"`
									K_FR   string `xml:",omitempty" json:",omitempty"`
									WEI    string `xml:",omitempty" json:",omitempty"`
									HEI    string `xml:",omitempty" json:",omitempty"`
									BSA    string `xml:",omitempty" json:",omitempty"`
									B_DIAG []struct {
										DIAG_DATE string `xml:",omitempty" json:",omitempty"`
										DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
										DIAG_CODE string `xml:",omitempty" json:",omitempty"`
										DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
										REC_RSLT  string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									B_PROT []struct {
										PROT   string `xml:",omitempty" json:",omitempty"`
										D_PROT string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									ONK_USL []struct {
										USL_TIP   string `xml:",omitempty" json:",omitempty"`
										HIR_TIP   string `xml:",omitempty" json:",omitempty"`
										LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
										LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
										LEK_PR    []struct {
											REGNUM   string `xml:",omitempty" json:",omitempty"`
											CODE_SH  string `xml:",omitempty" json:",omitempty"`
											DATE_INJ []string
										} `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									PPTR     string `xml:",omitempty" json:",omitempty"`
									LUCH_TIP string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								KSG_KPG []struct {
									N_KSG   string `xml:",omitempty" json:",omitempty"`
									VER_KSG string `xml:",omitempty" json:",omitempty"`
									KSG_PG  string `xml:",omitempty" json:",omitempty"`
									N_KPG   string `xml:",omitempty" json:",omitempty"`
									KOEF_Z  string `xml:",omitempty" json:",omitempty"`
									KOEF_UP string `xml:",omitempty" json:",omitempty"`
									BZTSZ   string `xml:",omitempty" json:",omitempty"`
									KOEF_D  string `xml:",omitempty" json:",omitempty"`
									KOEF_U  string `xml:",omitempty" json:",omitempty"`
									CRIT    []string
									SL_K    string `xml:",omitempty" json:",omitempty"`
									IT_SL   string `xml:",omitempty" json:",omitempty"`
									SL_KOEF []struct {
										IDSL string `xml:",omitempty" json:",omitempty"`
										Z_SL string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								REAB      string  `xml:",omitempty" json:",omitempty"`
								PRVS      string  `xml:",omitempty" json:",omitempty"`
								VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
								IDDOKT    string  `xml:",omitempty" json:",omitempty"`
								ED_COL    string  `xml:",omitempty" json:",omitempty"`
								TARIF     float32 `xml:",omitempty" json:",omitempty"`
								SUM_M     float32
								USL       []struct {
									IDSERV   string  `xml:",omitempty" json:",omitempty"`
									LPU      string  `xml:",omitempty" json:",omitempty"`
									LPU_1    string  `xml:",omitempty" json:",omitempty"`
									PODR     string  `xml:",omitempty" json:",omitempty"`
									PROFIL   string  `xml:",omitempty" json:",omitempty"`
									VID_VME  string  `xml:",omitempty" json:",omitempty"`
									DET      string  `xml:",omitempty" json:",omitempty"`
									DATE_IN  string  `xml:",omitempty" json:",omitempty"`
									DATE_OUT string  `xml:",omitempty" json:",omitempty"`
									DS       string  `xml:",omitempty" json:",omitempty"`
									P_OTK    string  `xml:",omitempty" json:",omitempty"`
									CODE_USL string  `xml:",omitempty" json:",omitempty"`
									KOL_USL  string  `xml:",omitempty" json:",omitempty"`
									TARIF    float32 `xml:",omitempty" json:",omitempty"`
									SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
									PRVS     string  `xml:",omitempty" json:",omitempty"`
									CODE_MD  string  `xml:",omitempty" json:",omitempty"`
									NPL      string  `xml:",omitempty" json:",omitempty"`
									COMENTU  string  `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								COMENTSL string `xml:",omitempty" json:",omitempty"`
							}
							IDSP   string  `xml:",omitempty" json:",omitempty"`
							SUMV   float32 `xml:",omitempty" json:",omitempty"`
							OPLATA string  `xml:",omitempty" json:",omitempty"`
							SUMP   float32 `xml:",omitempty" json:",omitempty"`
							SANK   []struct {
								S_CODE   string  `xml:",omitempty" json:",omitempty"`
								S_SUM    float32 `xml:",omitempty" json:",omitempty"`
								S_TIP    string  `xml:",omitempty" json:",omitempty"`
								SL_ID    string  `xml:",omitempty" json:",omitempty"`
								S_OSN    string  `xml:",omitempty" json:",omitempty"`
								DATE_ACT string  `xml:",omitempty" json:",omitempty"`
								NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
								CODE_EXP string  `xml:",omitempty" json:",omitempty"`
								S_COM    string  `xml:",omitempty" json:",omitempty"`
								S_IST    string  `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							SANK_IT string `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.Z_SL = []struct {
							IDCASE   string   `xml:",omitempty" json:",omitempty"`
							USL_OK   string   `xml:",omitempty" json:",omitempty"`
							VIDPOM   string   `xml:",omitempty" json:",omitempty"`
							FOR_POM  string   `xml:",omitempty" json:",omitempty"`
							NPR_MO   string   `xml:",omitempty" json:",omitempty"`
							NPR_DATE string   `xml:",omitempty" json:",omitempty"`
							LPU      string   `xml:",omitempty" json:",omitempty"`
							VBR      string   `xml:",omitempty" json:",omitempty"`
							DATE_Z_1 string   `xml:",omitempty" json:",omitempty"`
							DATE_Z_2 string   `xml:",omitempty" json:",omitempty"`
							KD_Z     string   `xml:",omitempty" json:",omitempty"`
							VNOV_M   []string `xml:",omitempty" json:",omitempty"`
							RSLT     string   `xml:",omitempty" json:",omitempty"`
							ISHOD    string   `xml:",omitempty" json:",omitempty"`
							P_OTK    string   `xml:",omitempty" json:",omitempty"`
							RSLT_D   string   `xml:",omitempty" json:",omitempty"`
							OS_SLUCH []string `xml:",omitempty" json:",omitempty"`
							VB_P     string   `xml:",omitempty" json:",omitempty"`
							SL       []struct {
								SL_ID     string
								VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
								METOD_HMP string   `xml:",omitempty" json:",omitempty"`
								LPU_1     string   `xml:",omitempty" json:",omitempty"`
								PODR      string   `xml:",omitempty" json:",omitempty"`
								PROFIL    string   `xml:",omitempty" json:",omitempty"`
								PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
								DET       string   `xml:",omitempty" json:",omitempty"`
								TAL_D     string   `xml:",omitempty" json:",omitempty"`
								TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
								TAL_P     string   `xml:",omitempty" json:",omitempty"`
								P_CEL     string   `xml:",omitempty" json:",omitempty"`
								NHISTORY  string   `xml:",omitempty" json:",omitempty"`
								P_PER     string   `xml:",omitempty" json:",omitempty"`
								DATE_1    string   `xml:",omitempty" json:",omitempty"`
								DATE_2    string   `xml:",omitempty" json:",omitempty"`
								KD        string   `xml:",omitempty" json:",omitempty"`
								DS0       string   `xml:",omitempty" json:",omitempty"`
								DS1       string   `xml:",omitempty" json:",omitempty"`
								DS2       []string `xml:",omitempty" json:",omitempty"`
								DS3       []string `xml:",omitempty" json:",omitempty"`
								C_ZAB     string   `xml:",omitempty" json:",omitempty"`
								DS1_PR    string   `xml:",omitempty" json:",omitempty"`
								DS_ONK    string   `xml:",omitempty" json:",omitempty"`
								PR_D_N    string   `xml:",omitempty" json:",omitempty"`
								DN        string   `xml:",omitempty" json:",omitempty"`
								CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
								CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
								DS2_N     []struct {
									DS2      string `xml:",omitempty" json:",omitempty"`
									DS2_PR   string `xml:",omitempty" json:",omitempty"`
									PR_DS2_N string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								NAZ []struct {
									NAZ_N     string `xml:",omitempty" json:",omitempty"`
									NAZ_R     string `xml:",omitempty" json:",omitempty"`
									NAZ_SP    string `xml:",omitempty" json:",omitempty"`
									NAZ_V     string `xml:",omitempty" json:",omitempty"`
									NAZ_USL   string `xml:",omitempty" json:",omitempty"`
									NAPR_DATE string `xml:",omitempty" json:",omitempty"`
									NAPR_MO   string `xml:",omitempty" json:",omitempty"`
									NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
									NAZ_PK    string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								NAPR []struct {
									NAPR_DATE string `xml:",omitempty" json:",omitempty"`
									NAPR_MO   string `xml:",omitempty" json:",omitempty"`
									NAPR_V    string `xml:",omitempty" json:",omitempty"`
									MET_ISSL  string `xml:",omitempty" json:",omitempty"`
									NAPR_USL  string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								CONS []struct {
									PR_CONS string `xml:",omitempty" json:",omitempty"`
									DT_CONS string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								ONK_SL []struct {
									DS1_T  string `xml:",omitempty" json:",omitempty"`
									STAD   string `xml:",omitempty" json:",omitempty"`
									ONK_T  string `xml:",omitempty" json:",omitempty"`
									ONK_N  string `xml:",omitempty" json:",omitempty"`
									ONK_M  string `xml:",omitempty" json:",omitempty"`
									MTSTZ  string `xml:",omitempty" json:",omitempty"`
									SOD    string `xml:",omitempty" json:",omitempty"`
									K_FR   string `xml:",omitempty" json:",omitempty"`
									WEI    string `xml:",omitempty" json:",omitempty"`
									HEI    string `xml:",omitempty" json:",omitempty"`
									BSA    string `xml:",omitempty" json:",omitempty"`
									B_DIAG []struct {
										DIAG_DATE string `xml:",omitempty" json:",omitempty"`
										DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
										DIAG_CODE string `xml:",omitempty" json:",omitempty"`
										DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
										REC_RSLT  string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									B_PROT []struct {
										PROT   string `xml:",omitempty" json:",omitempty"`
										D_PROT string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									ONK_USL []struct {
										USL_TIP   string `xml:",omitempty" json:",omitempty"`
										HIR_TIP   string `xml:",omitempty" json:",omitempty"`
										LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
										LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
										LEK_PR    []struct {
											REGNUM   string `xml:",omitempty" json:",omitempty"`
											CODE_SH  string `xml:",omitempty" json:",omitempty"`
											DATE_INJ []string
										} `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
									PPTR     string `xml:",omitempty" json:",omitempty"`
									LUCH_TIP string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								KSG_KPG []struct {
									N_KSG   string `xml:",omitempty" json:",omitempty"`
									VER_KSG string `xml:",omitempty" json:",omitempty"`
									KSG_PG  string `xml:",omitempty" json:",omitempty"`
									N_KPG   string `xml:",omitempty" json:",omitempty"`
									KOEF_Z  string `xml:",omitempty" json:",omitempty"`
									KOEF_UP string `xml:",omitempty" json:",omitempty"`
									BZTSZ   string `xml:",omitempty" json:",omitempty"`
									KOEF_D  string `xml:",omitempty" json:",omitempty"`
									KOEF_U  string `xml:",omitempty" json:",omitempty"`
									CRIT    []string
									SL_K    string `xml:",omitempty" json:",omitempty"`
									IT_SL   string `xml:",omitempty" json:",omitempty"`
									SL_KOEF []struct {
										IDSL string `xml:",omitempty" json:",omitempty"`
										Z_SL string `xml:",omitempty" json:",omitempty"`
									} `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								REAB      string  `xml:",omitempty" json:",omitempty"`
								PRVS      string  `xml:",omitempty" json:",omitempty"`
								VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
								IDDOKT    string  `xml:",omitempty" json:",omitempty"`
								ED_COL    string  `xml:",omitempty" json:",omitempty"`
								TARIF     float32 `xml:",omitempty" json:",omitempty"`
								SUM_M     float32
								USL       []struct {
									IDSERV   string  `xml:",omitempty" json:",omitempty"`
									LPU      string  `xml:",omitempty" json:",omitempty"`
									LPU_1    string  `xml:",omitempty" json:",omitempty"`
									PODR     string  `xml:",omitempty" json:",omitempty"`
									PROFIL   string  `xml:",omitempty" json:",omitempty"`
									VID_VME  string  `xml:",omitempty" json:",omitempty"`
									DET      string  `xml:",omitempty" json:",omitempty"`
									DATE_IN  string  `xml:",omitempty" json:",omitempty"`
									DATE_OUT string  `xml:",omitempty" json:",omitempty"`
									DS       string  `xml:",omitempty" json:",omitempty"`
									P_OTK    string  `xml:",omitempty" json:",omitempty"`
									CODE_USL string  `xml:",omitempty" json:",omitempty"`
									KOL_USL  string  `xml:",omitempty" json:",omitempty"`
									TARIF    float32 `xml:",omitempty" json:",omitempty"`
									SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
									PRVS     string  `xml:",omitempty" json:",omitempty"`
									CODE_MD  string  `xml:",omitempty" json:",omitempty"`
									NPL      string  `xml:",omitempty" json:",omitempty"`
									COMENTU  string  `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								COMENTSL string `xml:",omitempty" json:",omitempty"`
							}
							IDSP   string  `xml:",omitempty" json:",omitempty"`
							SUMV   float32 `xml:",omitempty" json:",omitempty"`
							OPLATA string  `xml:",omitempty" json:",omitempty"`
							SUMP   float32 `xml:",omitempty" json:",omitempty"`
							SANK   []struct {
								S_CODE   string  `xml:",omitempty" json:",omitempty"`
								S_SUM    float32 `xml:",omitempty" json:",omitempty"`
								S_TIP    string  `xml:",omitempty" json:",omitempty"`
								SL_ID    string  `xml:",omitempty" json:",omitempty"`
								S_OSN    string  `xml:",omitempty" json:",omitempty"`
								DATE_ACT string  `xml:",omitempty" json:",omitempty"`
								NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
								CODE_EXP string  `xml:",omitempty" json:",omitempty"`
								S_COM    string  `xml:",omitempty" json:",omitempty"`
								S_IST    string  `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							SANK_IT string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.Z_SL = (out.Z_SL)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						IDCASE   string   `xml:",omitempty" json:",omitempty"`
						USL_OK   string   `xml:",omitempty" json:",omitempty"`
						VIDPOM   string   `xml:",omitempty" json:",omitempty"`
						FOR_POM  string   `xml:",omitempty" json:",omitempty"`
						NPR_MO   string   `xml:",omitempty" json:",omitempty"`
						NPR_DATE string   `xml:",omitempty" json:",omitempty"`
						LPU      string   `xml:",omitempty" json:",omitempty"`
						VBR      string   `xml:",omitempty" json:",omitempty"`
						DATE_Z_1 string   `xml:",omitempty" json:",omitempty"`
						DATE_Z_2 string   `xml:",omitempty" json:",omitempty"`
						KD_Z     string   `xml:",omitempty" json:",omitempty"`
						VNOV_M   []string `xml:",omitempty" json:",omitempty"`
						RSLT     string   `xml:",omitempty" json:",omitempty"`
						ISHOD    string   `xml:",omitempty" json:",omitempty"`
						P_OTK    string   `xml:",omitempty" json:",omitempty"`
						RSLT_D   string   `xml:",omitempty" json:",omitempty"`
						OS_SLUCH []string `xml:",omitempty" json:",omitempty"`
						VB_P     string   `xml:",omitempty" json:",omitempty"`
						SL       []struct {
							SL_ID     string
							VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
							METOD_HMP string   `xml:",omitempty" json:",omitempty"`
							LPU_1     string   `xml:",omitempty" json:",omitempty"`
							PODR      string   `xml:",omitempty" json:",omitempty"`
							PROFIL    string   `xml:",omitempty" json:",omitempty"`
							PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
							DET       string   `xml:",omitempty" json:",omitempty"`
							TAL_D     string   `xml:",omitempty" json:",omitempty"`
							TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
							TAL_P     string   `xml:",omitempty" json:",omitempty"`
							P_CEL     string   `xml:",omitempty" json:",omitempty"`
							NHISTORY  string   `xml:",omitempty" json:",omitempty"`
							P_PER     string   `xml:",omitempty" json:",omitempty"`
							DATE_1    string   `xml:",omitempty" json:",omitempty"`
							DATE_2    string   `xml:",omitempty" json:",omitempty"`
							KD        string   `xml:",omitempty" json:",omitempty"`
							DS0       string   `xml:",omitempty" json:",omitempty"`
							DS1       string   `xml:",omitempty" json:",omitempty"`
							DS2       []string `xml:",omitempty" json:",omitempty"`
							DS3       []string `xml:",omitempty" json:",omitempty"`
							C_ZAB     string   `xml:",omitempty" json:",omitempty"`
							DS1_PR    string   `xml:",omitempty" json:",omitempty"`
							DS_ONK    string   `xml:",omitempty" json:",omitempty"`
							PR_D_N    string   `xml:",omitempty" json:",omitempty"`
							DN        string   `xml:",omitempty" json:",omitempty"`
							CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
							CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
							DS2_N     []struct {
								DS2      string `xml:",omitempty" json:",omitempty"`
								DS2_PR   string `xml:",omitempty" json:",omitempty"`
								PR_DS2_N string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							NAZ []struct {
								NAZ_N     string `xml:",omitempty" json:",omitempty"`
								NAZ_R     string `xml:",omitempty" json:",omitempty"`
								NAZ_SP    string `xml:",omitempty" json:",omitempty"`
								NAZ_V     string `xml:",omitempty" json:",omitempty"`
								NAZ_USL   string `xml:",omitempty" json:",omitempty"`
								NAPR_DATE string `xml:",omitempty" json:",omitempty"`
								NAPR_MO   string `xml:",omitempty" json:",omitempty"`
								NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
								NAZ_PK    string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							NAPR []struct {
								NAPR_DATE string `xml:",omitempty" json:",omitempty"`
								NAPR_MO   string `xml:",omitempty" json:",omitempty"`
								NAPR_V    string `xml:",omitempty" json:",omitempty"`
								MET_ISSL  string `xml:",omitempty" json:",omitempty"`
								NAPR_USL  string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							CONS []struct {
								PR_CONS string `xml:",omitempty" json:",omitempty"`
								DT_CONS string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							ONK_SL []struct {
								DS1_T  string `xml:",omitempty" json:",omitempty"`
								STAD   string `xml:",omitempty" json:",omitempty"`
								ONK_T  string `xml:",omitempty" json:",omitempty"`
								ONK_N  string `xml:",omitempty" json:",omitempty"`
								ONK_M  string `xml:",omitempty" json:",omitempty"`
								MTSTZ  string `xml:",omitempty" json:",omitempty"`
								SOD    string `xml:",omitempty" json:",omitempty"`
								K_FR   string `xml:",omitempty" json:",omitempty"`
								WEI    string `xml:",omitempty" json:",omitempty"`
								HEI    string `xml:",omitempty" json:",omitempty"`
								BSA    string `xml:",omitempty" json:",omitempty"`
								B_DIAG []struct {
									DIAG_DATE string `xml:",omitempty" json:",omitempty"`
									DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
									DIAG_CODE string `xml:",omitempty" json:",omitempty"`
									DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
									REC_RSLT  string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								B_PROT []struct {
									PROT   string `xml:",omitempty" json:",omitempty"`
									D_PROT string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								ONK_USL []struct {
									USL_TIP   string `xml:",omitempty" json:",omitempty"`
									HIR_TIP   string `xml:",omitempty" json:",omitempty"`
									LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
									LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
									LEK_PR    []struct {
										REGNUM   string `xml:",omitempty" json:",omitempty"`
										CODE_SH  string `xml:",omitempty" json:",omitempty"`
										DATE_INJ []string
									} `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								PPTR     string `xml:",omitempty" json:",omitempty"`
								LUCH_TIP string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							KSG_KPG []struct {
								N_KSG   string `xml:",omitempty" json:",omitempty"`
								VER_KSG string `xml:",omitempty" json:",omitempty"`
								KSG_PG  string `xml:",omitempty" json:",omitempty"`
								N_KPG   string `xml:",omitempty" json:",omitempty"`
								KOEF_Z  string `xml:",omitempty" json:",omitempty"`
								KOEF_UP string `xml:",omitempty" json:",omitempty"`
								BZTSZ   string `xml:",omitempty" json:",omitempty"`
								KOEF_D  string `xml:",omitempty" json:",omitempty"`
								KOEF_U  string `xml:",omitempty" json:",omitempty"`
								CRIT    []string
								SL_K    string `xml:",omitempty" json:",omitempty"`
								IT_SL   string `xml:",omitempty" json:",omitempty"`
								SL_KOEF []struct {
									IDSL string `xml:",omitempty" json:",omitempty"`
									Z_SL string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							REAB      string  `xml:",omitempty" json:",omitempty"`
							PRVS      string  `xml:",omitempty" json:",omitempty"`
							VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
							IDDOKT    string  `xml:",omitempty" json:",omitempty"`
							ED_COL    string  `xml:",omitempty" json:",omitempty"`
							TARIF     float32 `xml:",omitempty" json:",omitempty"`
							SUM_M     float32
							USL       []struct {
								IDSERV   string  `xml:",omitempty" json:",omitempty"`
								LPU      string  `xml:",omitempty" json:",omitempty"`
								LPU_1    string  `xml:",omitempty" json:",omitempty"`
								PODR     string  `xml:",omitempty" json:",omitempty"`
								PROFIL   string  `xml:",omitempty" json:",omitempty"`
								VID_VME  string  `xml:",omitempty" json:",omitempty"`
								DET      string  `xml:",omitempty" json:",omitempty"`
								DATE_IN  string  `xml:",omitempty" json:",omitempty"`
								DATE_OUT string  `xml:",omitempty" json:",omitempty"`
								DS       string  `xml:",omitempty" json:",omitempty"`
								P_OTK    string  `xml:",omitempty" json:",omitempty"`
								CODE_USL string  `xml:",omitempty" json:",omitempty"`
								KOL_USL  string  `xml:",omitempty" json:",omitempty"`
								TARIF    float32 `xml:",omitempty" json:",omitempty"`
								SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
								PRVS     string  `xml:",omitempty" json:",omitempty"`
								CODE_MD  string  `xml:",omitempty" json:",omitempty"`
								NPL      string  `xml:",omitempty" json:",omitempty"`
								COMENTU  string  `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							COMENTSL string `xml:",omitempty" json:",omitempty"`
						}
						IDSP   string  `xml:",omitempty" json:",omitempty"`
						SUMV   float32 `xml:",omitempty" json:",omitempty"`
						OPLATA string  `xml:",omitempty" json:",omitempty"`
						SUMP   float32 `xml:",omitempty" json:",omitempty"`
						SANK   []struct {
							S_CODE   string  `xml:",omitempty" json:",omitempty"`
							S_SUM    float32 `xml:",omitempty" json:",omitempty"`
							S_TIP    string  `xml:",omitempty" json:",omitempty"`
							SL_ID    string  `xml:",omitempty" json:",omitempty"`
							S_OSN    string  `xml:",omitempty" json:",omitempty"`
							DATE_ACT string  `xml:",omitempty" json:",omitempty"`
							NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
							CODE_EXP string  `xml:",omitempty" json:",omitempty"`
							S_COM    string  `xml:",omitempty" json:",omitempty"`
							S_IST    string  `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						SANK_IT string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode1(in, &v4)
					out.Z_SL = append(out.Z_SL, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode(out *jwriter.Writer, in struct {
	N_ZAP   string
	PR_NOV  string
	PACIENT Pacient
	Z_SL    []struct {
		IDCASE   string   `xml:",omitempty" json:",omitempty"`
		USL_OK   string   `xml:",omitempty" json:",omitempty"`
		VIDPOM   string   `xml:",omitempty" json:",omitempty"`
		FOR_POM  string   `xml:",omitempty" json:",omitempty"`
		NPR_MO   string   `xml:",omitempty" json:",omitempty"`
		NPR_DATE string   `xml:",omitempty" json:",omitempty"`
		LPU      string   `xml:",omitempty" json:",omitempty"`
		VBR      string   `xml:",omitempty" json:",omitempty"`
		DATE_Z_1 string   `xml:",omitempty" json:",omitempty"`
		DATE_Z_2 string   `xml:",omitempty" json:",omitempty"`
		KD_Z     string   `xml:",omitempty" json:",omitempty"`
		VNOV_M   []string `xml:",omitempty" json:",omitempty"`
		RSLT     string   `xml:",omitempty" json:",omitempty"`
		ISHOD    string   `xml:",omitempty" json:",omitempty"`
		P_OTK    string   `xml:",omitempty" json:",omitempty"`
		RSLT_D   string   `xml:",omitempty" json:",omitempty"`
		OS_SLUCH []string `xml:",omitempty" json:",omitempty"`
		VB_P     string   `xml:",omitempty" json:",omitempty"`
		SL       []struct {
			SL_ID     string
			VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
			METOD_HMP string   `xml:",omitempty" json:",omitempty"`
			LPU_1     string   `xml:",omitempty" json:",omitempty"`
			PODR      string   `xml:",omitempty" json:",omitempty"`
			PROFIL    string   `xml:",omitempty" json:",omitempty"`
			PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
			DET       string   `xml:",omitempty" json:",omitempty"`
			TAL_D     string   `xml:",omitempty" json:",omitempty"`
			TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
			TAL_P     string   `xml:",omitempty" json:",omitempty"`
			P_CEL     string   `xml:",omitempty" json:",omitempty"`
			NHISTORY  string   `xml:",omitempty" json:",omitempty"`
			P_PER     string   `xml:",omitempty" json:",omitempty"`
			DATE_1    string   `xml:",omitempty" json:",omitempty"`
			DATE_2    string   `xml:",omitempty" json:",omitempty"`
			KD        string   `xml:",omitempty" json:",omitempty"`
			DS0       string   `xml:",omitempty" json:",omitempty"`
			DS1       string   `xml:",omitempty" json:",omitempty"`
			DS2       []string `xml:",omitempty" json:",omitempty"`
			DS3       []string `xml:",omitempty" json:",omitempty"`
			C_ZAB     string   `xml:",omitempty" json:",omitempty"`
			DS1_PR    string   `xml:",omitempty" json:",omitempty"`
			DS_ONK    string   `xml:",omitempty" json:",omitempty"`
			PR_D_N    string   `xml:",omitempty" json:",omitempty"`
			DN        string   `xml:",omitempty" json:",omitempty"`
			CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
			CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
			DS2_N     []struct {
				DS2      string `xml:",omitempty" json:",omitempty"`
				DS2_PR   string `xml:",omitempty" json:",omitempty"`
				PR_DS2_N string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			NAZ []struct {
				NAZ_N     string `xml:",omitempty" json:",omitempty"`
				NAZ_R     string `xml:",omitempty" json:",omitempty"`
				NAZ_SP    string `xml:",omitempty" json:",omitempty"`
				NAZ_V     string `xml:",omitempty" json:",omitempty"`
				NAZ_USL   string `xml:",omitempty" json:",omitempty"`
				NAPR_DATE string `xml:",omitempty" json:",omitempty"`
				NAPR_MO   string `xml:",omitempty" json:",omitempty"`
				NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
				NAZ_PK    string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			NAPR []struct {
				NAPR_DATE string `xml:",omitempty" json:",omitempty"`
				NAPR_MO   string `xml:",omitempty" json:",omitempty"`
				NAPR_V    string `xml:",omitempty" json:",omitempty"`
				MET_ISSL  string `xml:",omitempty" json:",omitempty"`
				NAPR_USL  string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			CONS []struct {
				PR_CONS string `xml:",omitempty" json:",omitempty"`
				DT_CONS string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			ONK_SL []struct {
				DS1_T  string `xml:",omitempty" json:",omitempty"`
				STAD   string `xml:",omitempty" json:",omitempty"`
				ONK_T  string `xml:",omitempty" json:",omitempty"`
				ONK_N  string `xml:",omitempty" json:",omitempty"`
				ONK_M  string `xml:",omitempty" json:",omitempty"`
				MTSTZ  string `xml:",omitempty" json:",omitempty"`
				SOD    string `xml:",omitempty" json:",omitempty"`
				K_FR   string `xml:",omitempty" json:",omitempty"`
				WEI    string `xml:",omitempty" json:",omitempty"`
				HEI    string `xml:",omitempty" json:",omitempty"`
				BSA    string `xml:",omitempty" json:",omitempty"`
				B_DIAG []struct {
					DIAG_DATE string `xml:",omitempty" json:",omitempty"`
					DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
					DIAG_CODE string `xml:",omitempty" json:",omitempty"`
					DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
					REC_RSLT  string `xml:",omitempty" json:",omitempty"`
				} `xml:",omitempty" json:",omitempty"`
				B_PROT []struct {
					PROT   string `xml:",omitempty" json:",omitempty"`
					D_PROT string `xml:",omitempty" json:",omitempty"`
				} `xml:",omitempty" json:",omitempty"`
				ONK_USL []struct {
					USL_TIP   string `xml:",omitempty" json:",omitempty"`
					HIR_TIP   string `xml:",omitempty" json:",omitempty"`
					LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
					LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
					LEK_PR    []struct {
						REGNUM   string `xml:",omitempty" json:",omitempty"`
						CODE_SH  string `xml:",omitempty" json:",omitempty"`
						DATE_INJ []string
					} `xml:",omitempty" json:",omitempty"`
				} `xml:",omitempty" json:",omitempty"`
				PPTR     string `xml:",omitempty" json:",omitempty"`
				LUCH_TIP string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			KSG_KPG []struct {
				N_KSG   string `xml:",omitempty" json:",omitempty"`
				VER_KSG string `xml:",omitempty" json:",omitempty"`
				KSG_PG  string `xml:",omitempty" json:",omitempty"`
				N_KPG   string `xml:",omitempty" json:",omitempty"`
				KOEF_Z  string `xml:",omitempty" json:",omitempty"`
				KOEF_UP string `xml:",omitempty" json:",omitempty"`
				BZTSZ   string `xml:",omitempty" json:",omitempty"`
				KOEF_D  string `xml:",omitempty" json:",omitempty"`
				KOEF_U  string `xml:",omitempty" json:",omitempty"`
				CRIT    []string
				SL_K    string `xml:",omitempty" json:",omitempty"`
				IT_SL   string `xml:",omitempty" json:",omitempty"`
				SL_KOEF []struct {
					IDSL string `xml:",omitempty" json:",omitempty"`
					Z_SL string `xml:",omitempty" json:",omitempty"`
				} `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			REAB      string  `xml:",omitempty" json:",omitempty"`
			PRVS      string  `xml:",omitempty" json:",omitempty"`
			VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
			IDDOKT    string  `xml:",omitempty" json:",omitempty"`
			ED_COL    string  `xml:",omitempty" json:",omitempty"`
			TARIF     float32 `xml:",omitempty" json:",omitempty"`
			SUM_M     float32
			USL       []struct {
				IDSERV   string  `xml:",omitempty" json:",omitempty"`
				LPU      string  `xml:",omitempty" json:",omitempty"`
				LPU_1    string  `xml:",omitempty" json:",omitempty"`
				PODR     string  `xml:",omitempty" json:",omitempty"`
				PROFIL   string  `xml:",omitempty" json:",omitempty"`
				VID_VME  string  `xml:",omitempty" json:",omitempty"`
				DET      string  `xml:",omitempty" json:",omitempty"`
				DATE_IN  string  `xml:",omitempty" json:",omitempty"`
				DATE_OUT string  `xml:",omitempty" json:",omitempty"`
				DS       string  `xml:",omitempty" json:",omitempty"`
				P_OTK    string  `xml:",omitempty" json:",omitempty"`
				CODE_USL string  `xml:",omitempty" json:",omitempty"`
				KOL_USL  string  `xml:",omitempty" json:",omitempty"`
				TARIF    float32 `xml:",omitempty" json:",omitempty"`
				SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
				PRVS     string  `xml:",omitempty" json:",omitempty"`
				CODE_MD  string  `xml:",omitempty" json:",omitempty"`
				NPL      string  `xml:",omitempty" json:",omitempty"`
				COMENTU  string  `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			COMENTSL string `xml:",omitempty" json:",omitempty"`
		}
		IDSP   string  `xml:",omitempty" json:",omitempty"`
		SUMV   float32 `xml:",omitempty" json:",omitempty"`
		OPLATA string  `xml:",omitempty" json:",omitempty"`
		SUMP   float32 `xml:",omitempty" json:",omitempty"`
		SANK   []struct {
			S_CODE   string  `xml:",omitempty" json:",omitempty"`
			S_SUM    float32 `xml:",omitempty" json:",omitempty"`
			S_TIP    string  `xml:",omitempty" json:",omitempty"`
			SL_ID    string  `xml:",omitempty" json:",omitempty"`
			S_OSN    string  `xml:",omitempty" json:",omitempty"`
			DATE_ACT string  `xml:",omitempty" json:",omitempty"`
			NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
			CODE_EXP string  `xml:",omitempty" json:",omitempty"`
			S_COM    string  `xml:",omitempty" json:",omitempty"`
			S_IST    string  `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		SANK_IT string `xml:",omitempty" json:",omitempty"`
	}
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"N_ZAP\":"
		out.RawString(prefix[1:])
		out.String(string(in.N_ZAP))
	}
	{
		const prefix string = ",\"PR_NOV\":"
		out.RawString(prefix)
		out.String(string(in.PR_NOV))
	}
	{
		const prefix string = ",\"PACIENT\":"
		out.RawString(prefix)
		(in.PACIENT).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Z_SL\":"
		out.RawString(prefix)
		if in.Z_SL == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Z_SL {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode1(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode1(in *jlexer.Lexer, out *struct {
	IDCASE   string   `xml:",omitempty" json:",omitempty"`
	USL_OK   string   `xml:",omitempty" json:",omitempty"`
	VIDPOM   string   `xml:",omitempty" json:",omitempty"`
	FOR_POM  string   `xml:",omitempty" json:",omitempty"`
	NPR_MO   string   `xml:",omitempty" json:",omitempty"`
	NPR_DATE string   `xml:",omitempty" json:",omitempty"`
	LPU      string   `xml:",omitempty" json:",omitempty"`
	VBR      string   `xml:",omitempty" json:",omitempty"`
	DATE_Z_1 string   `xml:",omitempty" json:",omitempty"`
	DATE_Z_2 string   `xml:",omitempty" json:",omitempty"`
	KD_Z     string   `xml:",omitempty" json:",omitempty"`
	VNOV_M   []string `xml:",omitempty" json:",omitempty"`
	RSLT     string   `xml:",omitempty" json:",omitempty"`
	ISHOD    string   `xml:",omitempty" json:",omitempty"`
	P_OTK    string   `xml:",omitempty" json:",omitempty"`
	RSLT_D   string   `xml:",omitempty" json:",omitempty"`
	OS_SLUCH []string `xml:",omitempty" json:",omitempty"`
	VB_P     string   `xml:",omitempty" json:",omitempty"`
	SL       []struct {
		SL_ID     string
		VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
		METOD_HMP string   `xml:",omitempty" json:",omitempty"`
		LPU_1     string   `xml:",omitempty" json:",omitempty"`
		PODR      string   `xml:",omitempty" json:",omitempty"`
		PROFIL    string   `xml:",omitempty" json:",omitempty"`
		PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
		DET       string   `xml:",omitempty" json:",omitempty"`
		TAL_D     string   `xml:",omitempty" json:",omitempty"`
		TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
		TAL_P     string   `xml:",omitempty" json:",omitempty"`
		P_CEL     string   `xml:",omitempty" json:",omitempty"`
		NHISTORY  string   `xml:",omitempty" json:",omitempty"`
		P_PER     string   `xml:",omitempty" json:",omitempty"`
		DATE_1    string   `xml:",omitempty" json:",omitempty"`
		DATE_2    string   `xml:",omitempty" json:",omitempty"`
		KD        string   `xml:",omitempty" json:",omitempty"`
		DS0       string   `xml:",omitempty" json:",omitempty"`
		DS1       string   `xml:",omitempty" json:",omitempty"`
		DS2       []string `xml:",omitempty" json:",omitempty"`
		DS3       []string `xml:",omitempty" json:",omitempty"`
		C_ZAB     string   `xml:",omitempty" json:",omitempty"`
		DS1_PR    string   `xml:",omitempty" json:",omitempty"`
		DS_ONK    string   `xml:",omitempty" json:",omitempty"`
		PR_D_N    string   `xml:",omitempty" json:",omitempty"`
		DN        string   `xml:",omitempty" json:",omitempty"`
		CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
		CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
		DS2_N     []struct {
			DS2      string `xml:",omitempty" json:",omitempty"`
			DS2_PR   string `xml:",omitempty" json:",omitempty"`
			PR_DS2_N string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		NAZ []struct {
			NAZ_N     string `xml:",omitempty" json:",omitempty"`
			NAZ_R     string `xml:",omitempty" json:",omitempty"`
			NAZ_SP    string `xml:",omitempty" json:",omitempty"`
			NAZ_V     string `xml:",omitempty" json:",omitempty"`
			NAZ_USL   string `xml:",omitempty" json:",omitempty"`
			NAPR_DATE string `xml:",omitempty" json:",omitempty"`
			NAPR_MO   string `xml:",omitempty" json:",omitempty"`
			NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
			NAZ_PK    string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		NAPR []struct {
			NAPR_DATE string `xml:",omitempty" json:",omitempty"`
			NAPR_MO   string `xml:",omitempty" json:",omitempty"`
			NAPR_V    string `xml:",omitempty" json:",omitempty"`
			MET_ISSL  string `xml:",omitempty" json:",omitempty"`
			NAPR_USL  string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		CONS []struct {
			PR_CONS string `xml:",omitempty" json:",omitempty"`
			DT_CONS string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		ONK_SL []struct {
			DS1_T  string `xml:",omitempty" json:",omitempty"`
			STAD   string `xml:",omitempty" json:",omitempty"`
			ONK_T  string `xml:",omitempty" json:",omitempty"`
			ONK_N  string `xml:",omitempty" json:",omitempty"`
			ONK_M  string `xml:",omitempty" json:",omitempty"`
			MTSTZ  string `xml:",omitempty" json:",omitempty"`
			SOD    string `xml:",omitempty" json:",omitempty"`
			K_FR   string `xml:",omitempty" json:",omitempty"`
			WEI    string `xml:",omitempty" json:",omitempty"`
			HEI    string `xml:",omitempty" json:",omitempty"`
			BSA    string `xml:",omitempty" json:",omitempty"`
			B_DIAG []struct {
				DIAG_DATE string `xml:",omitempty" json:",omitempty"`
				DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
				DIAG_CODE string `xml:",omitempty" json:",omitempty"`
				DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
				REC_RSLT  string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			B_PROT []struct {
				PROT   string `xml:",omitempty" json:",omitempty"`
				D_PROT string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			ONK_USL []struct {
				USL_TIP   string `xml:",omitempty" json:",omitempty"`
				HIR_TIP   string `xml:",omitempty" json:",omitempty"`
				LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
				LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
				LEK_PR    []struct {
					REGNUM   string `xml:",omitempty" json:",omitempty"`
					CODE_SH  string `xml:",omitempty" json:",omitempty"`
					DATE_INJ []string
				} `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			PPTR     string `xml:",omitempty" json:",omitempty"`
			LUCH_TIP string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		KSG_KPG []struct {
			N_KSG   string `xml:",omitempty" json:",omitempty"`
			VER_KSG string `xml:",omitempty" json:",omitempty"`
			KSG_PG  string `xml:",omitempty" json:",omitempty"`
			N_KPG   string `xml:",omitempty" json:",omitempty"`
			KOEF_Z  string `xml:",omitempty" json:",omitempty"`
			KOEF_UP string `xml:",omitempty" json:",omitempty"`
			BZTSZ   string `xml:",omitempty" json:",omitempty"`
			KOEF_D  string `xml:",omitempty" json:",omitempty"`
			KOEF_U  string `xml:",omitempty" json:",omitempty"`
			CRIT    []string
			SL_K    string `xml:",omitempty" json:",omitempty"`
			IT_SL   string `xml:",omitempty" json:",omitempty"`
			SL_KOEF []struct {
				IDSL string `xml:",omitempty" json:",omitempty"`
				Z_SL string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		REAB      string  `xml:",omitempty" json:",omitempty"`
		PRVS      string  `xml:",omitempty" json:",omitempty"`
		VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
		IDDOKT    string  `xml:",omitempty" json:",omitempty"`
		ED_COL    string  `xml:",omitempty" json:",omitempty"`
		TARIF     float32 `xml:",omitempty" json:",omitempty"`
		SUM_M     float32
		USL       []struct {
			IDSERV   string  `xml:",omitempty" json:",omitempty"`
			LPU      string  `xml:",omitempty" json:",omitempty"`
			LPU_1    string  `xml:",omitempty" json:",omitempty"`
			PODR     string  `xml:",omitempty" json:",omitempty"`
			PROFIL   string  `xml:",omitempty" json:",omitempty"`
			VID_VME  string  `xml:",omitempty" json:",omitempty"`
			DET      string  `xml:",omitempty" json:",omitempty"`
			DATE_IN  string  `xml:",omitempty" json:",omitempty"`
			DATE_OUT string  `xml:",omitempty" json:",omitempty"`
			DS       string  `xml:",omitempty" json:",omitempty"`
			P_OTK    string  `xml:",omitempty" json:",omitempty"`
			CODE_USL string  `xml:",omitempty" json:",omitempty"`
			KOL_USL  string  `xml:",omitempty" json:",omitempty"`
			TARIF    float32 `xml:",omitempty" json:",omitempty"`
			SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
			PRVS     string  `xml:",omitempty" json:",omitempty"`
			CODE_MD  string  `xml:",omitempty" json:",omitempty"`
			NPL      string  `xml:",omitempty" json:",omitempty"`
			COMENTU  string  `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		COMENTSL string `xml:",omitempty" json:",omitempty"`
	}
	IDSP   string  `xml:",omitempty" json:",omitempty"`
	SUMV   float32 `xml:",omitempty" json:",omitempty"`
	OPLATA string  `xml:",omitempty" json:",omitempty"`
	SUMP   float32 `xml:",omitempty" json:",omitempty"`
	SANK   []struct {
		S_CODE   string  `xml:",omitempty" json:",omitempty"`
		S_SUM    float32 `xml:",omitempty" json:",omitempty"`
		S_TIP    string  `xml:",omitempty" json:",omitempty"`
		SL_ID    string  `xml:",omitempty" json:",omitempty"`
		S_OSN    string  `xml:",omitempty" json:",omitempty"`
		DATE_ACT string  `xml:",omitempty" json:",omitempty"`
		NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
		CODE_EXP string  `xml:",omitempty" json:",omitempty"`
		S_COM    string  `xml:",omitempty" json:",omitempty"`
		S_IST    string  `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	SANK_IT string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IDCASE":
			out.IDCASE = string(in.String())
		case "USL_OK":
			out.USL_OK = string(in.String())
		case "VIDPOM":
			out.VIDPOM = string(in.String())
		case "FOR_POM":
			out.FOR_POM = string(in.String())
		case "NPR_MO":
			out.NPR_MO = string(in.String())
		case "NPR_DATE":
			out.NPR_DATE = string(in.String())
		case "LPU":
			out.LPU = string(in.String())
		case "VBR":
			out.VBR = string(in.String())
		case "DATE_Z_1":
			out.DATE_Z_1 = string(in.String())
		case "DATE_Z_2":
			out.DATE_Z_2 = string(in.String())
		case "KD_Z":
			out.KD_Z = string(in.String())
		case "VNOV_M":
			if in.IsNull() {
				in.Skip()
				out.VNOV_M = nil
			} else {
				in.Delim('[')
				if out.VNOV_M == nil {
					if !in.IsDelim(']') {
						out.VNOV_M = make([]string, 0, 4)
					} else {
						out.VNOV_M = []string{}
					}
				} else {
					out.VNOV_M = (out.VNOV_M)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.VNOV_M = append(out.VNOV_M, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RSLT":
			out.RSLT = string(in.String())
		case "ISHOD":
			out.ISHOD = string(in.String())
		case "P_OTK":
			out.P_OTK = string(in.String())
		case "RSLT_D":
			out.RSLT_D = string(in.String())
		case "OS_SLUCH":
			if in.IsNull() {
				in.Skip()
				out.OS_SLUCH = nil
			} else {
				in.Delim('[')
				if out.OS_SLUCH == nil {
					if !in.IsDelim(']') {
						out.OS_SLUCH = make([]string, 0, 4)
					} else {
						out.OS_SLUCH = []string{}
					}
				} else {
					out.OS_SLUCH = (out.OS_SLUCH)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.OS_SLUCH = append(out.OS_SLUCH, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "VB_P":
			out.VB_P = string(in.String())
		case "SL":
			if in.IsNull() {
				in.Skip()
				out.SL = nil
			} else {
				in.Delim('[')
				if out.SL == nil {
					if !in.IsDelim(']') {
						out.SL = make([]struct {
							SL_ID     string
							VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
							METOD_HMP string   `xml:",omitempty" json:",omitempty"`
							LPU_1     string   `xml:",omitempty" json:",omitempty"`
							PODR      string   `xml:",omitempty" json:",omitempty"`
							PROFIL    string   `xml:",omitempty" json:",omitempty"`
							PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
							DET       string   `xml:",omitempty" json:",omitempty"`
							TAL_D     string   `xml:",omitempty" json:",omitempty"`
							TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
							TAL_P     string   `xml:",omitempty" json:",omitempty"`
							P_CEL     string   `xml:",omitempty" json:",omitempty"`
							NHISTORY  string   `xml:",omitempty" json:",omitempty"`
							P_PER     string   `xml:",omitempty" json:",omitempty"`
							DATE_1    string   `xml:",omitempty" json:",omitempty"`
							DATE_2    string   `xml:",omitempty" json:",omitempty"`
							KD        string   `xml:",omitempty" json:",omitempty"`
							DS0       string   `xml:",omitempty" json:",omitempty"`
							DS1       string   `xml:",omitempty" json:",omitempty"`
							DS2       []string `xml:",omitempty" json:",omitempty"`
							DS3       []string `xml:",omitempty" json:",omitempty"`
							C_ZAB     string   `xml:",omitempty" json:",omitempty"`
							DS1_PR    string   `xml:",omitempty" json:",omitempty"`
							DS_ONK    string   `xml:",omitempty" json:",omitempty"`
							PR_D_N    string   `xml:",omitempty" json:",omitempty"`
							DN        string   `xml:",omitempty" json:",omitempty"`
							CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
							CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
							DS2_N     []struct {
								DS2      string `xml:",omitempty" json:",omitempty"`
								DS2_PR   string `xml:",omitempty" json:",omitempty"`
								PR_DS2_N string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							NAZ []struct {
								NAZ_N     string `xml:",omitempty" json:",omitempty"`
								NAZ_R     string `xml:",omitempty" json:",omitempty"`
								NAZ_SP    string `xml:",omitempty" json:",omitempty"`
								NAZ_V     string `xml:",omitempty" json:",omitempty"`
								NAZ_USL   string `xml:",omitempty" json:",omitempty"`
								NAPR_DATE string `xml:",omitempty" json:",omitempty"`
								NAPR_MO   string `xml:",omitempty" json:",omitempty"`
								NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
								NAZ_PK    string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							NAPR []struct {
								NAPR_DATE string `xml:",omitempty" json:",omitempty"`
								NAPR_MO   string `xml:",omitempty" json:",omitempty"`
								NAPR_V    string `xml:",omitempty" json:",omitempty"`
								MET_ISSL  string `xml:",omitempty" json:",omitempty"`
								NAPR_USL  string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							CONS []struct {
								PR_CONS string `xml:",omitempty" json:",omitempty"`
								DT_CONS string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							ONK_SL []struct {
								DS1_T  string `xml:",omitempty" json:",omitempty"`
								STAD   string `xml:",omitempty" json:",omitempty"`
								ONK_T  string `xml:",omitempty" json:",omitempty"`
								ONK_N  string `xml:",omitempty" json:",omitempty"`
								ONK_M  string `xml:",omitempty" json:",omitempty"`
								MTSTZ  string `xml:",omitempty" json:",omitempty"`
								SOD    string `xml:",omitempty" json:",omitempty"`
								K_FR   string `xml:",omitempty" json:",omitempty"`
								WEI    string `xml:",omitempty" json:",omitempty"`
								HEI    string `xml:",omitempty" json:",omitempty"`
								BSA    string `xml:",omitempty" json:",omitempty"`
								B_DIAG []struct {
									DIAG_DATE string `xml:",omitempty" json:",omitempty"`
									DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
									DIAG_CODE string `xml:",omitempty" json:",omitempty"`
									DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
									REC_RSLT  string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								B_PROT []struct {
									PROT   string `xml:",omitempty" json:",omitempty"`
									D_PROT string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								ONK_USL []struct {
									USL_TIP   string `xml:",omitempty" json:",omitempty"`
									HIR_TIP   string `xml:",omitempty" json:",omitempty"`
									LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
									LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
									LEK_PR    []struct {
										REGNUM   string `xml:",omitempty" json:",omitempty"`
										CODE_SH  string `xml:",omitempty" json:",omitempty"`
										DATE_INJ []string
									} `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								PPTR     string `xml:",omitempty" json:",omitempty"`
								LUCH_TIP string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							KSG_KPG []struct {
								N_KSG   string `xml:",omitempty" json:",omitempty"`
								VER_KSG string `xml:",omitempty" json:",omitempty"`
								KSG_PG  string `xml:",omitempty" json:",omitempty"`
								N_KPG   string `xml:",omitempty" json:",omitempty"`
								KOEF_Z  string `xml:",omitempty" json:",omitempty"`
								KOEF_UP string `xml:",omitempty" json:",omitempty"`
								BZTSZ   string `xml:",omitempty" json:",omitempty"`
								KOEF_D  string `xml:",omitempty" json:",omitempty"`
								KOEF_U  string `xml:",omitempty" json:",omitempty"`
								CRIT    []string
								SL_K    string `xml:",omitempty" json:",omitempty"`
								IT_SL   string `xml:",omitempty" json:",omitempty"`
								SL_KOEF []struct {
									IDSL string `xml:",omitempty" json:",omitempty"`
									Z_SL string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							REAB      string  `xml:",omitempty" json:",omitempty"`
							PRVS      string  `xml:",omitempty" json:",omitempty"`
							VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
							IDDOKT    string  `xml:",omitempty" json:",omitempty"`
							ED_COL    string  `xml:",omitempty" json:",omitempty"`
							TARIF     float32 `xml:",omitempty" json:",omitempty"`
							SUM_M     float32
							USL       []struct {
								IDSERV   string  `xml:",omitempty" json:",omitempty"`
								LPU      string  `xml:",omitempty" json:",omitempty"`
								LPU_1    string  `xml:",omitempty" json:",omitempty"`
								PODR     string  `xml:",omitempty" json:",omitempty"`
								PROFIL   string  `xml:",omitempty" json:",omitempty"`
								VID_VME  string  `xml:",omitempty" json:",omitempty"`
								DET      string  `xml:",omitempty" json:",omitempty"`
								DATE_IN  string  `xml:",omitempty" json:",omitempty"`
								DATE_OUT string  `xml:",omitempty" json:",omitempty"`
								DS       string  `xml:",omitempty" json:",omitempty"`
								P_OTK    string  `xml:",omitempty" json:",omitempty"`
								CODE_USL string  `xml:",omitempty" json:",omitempty"`
								KOL_USL  string  `xml:",omitempty" json:",omitempty"`
								TARIF    float32 `xml:",omitempty" json:",omitempty"`
								SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
								PRVS     string  `xml:",omitempty" json:",omitempty"`
								CODE_MD  string  `xml:",omitempty" json:",omitempty"`
								NPL      string  `xml:",omitempty" json:",omitempty"`
								COMENTU  string  `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							COMENTSL string `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.SL = []struct {
							SL_ID     string
							VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
							METOD_HMP string   `xml:",omitempty" json:",omitempty"`
							LPU_1     string   `xml:",omitempty" json:",omitempty"`
							PODR      string   `xml:",omitempty" json:",omitempty"`
							PROFIL    string   `xml:",omitempty" json:",omitempty"`
							PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
							DET       string   `xml:",omitempty" json:",omitempty"`
							TAL_D     string   `xml:",omitempty" json:",omitempty"`
							TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
							TAL_P     string   `xml:",omitempty" json:",omitempty"`
							P_CEL     string   `xml:",omitempty" json:",omitempty"`
							NHISTORY  string   `xml:",omitempty" json:",omitempty"`
							P_PER     string   `xml:",omitempty" json:",omitempty"`
							DATE_1    string   `xml:",omitempty" json:",omitempty"`
							DATE_2    string   `xml:",omitempty" json:",omitempty"`
							KD        string   `xml:",omitempty" json:",omitempty"`
							DS0       string   `xml:",omitempty" json:",omitempty"`
							DS1       string   `xml:",omitempty" json:",omitempty"`
							DS2       []string `xml:",omitempty" json:",omitempty"`
							DS3       []string `xml:",omitempty" json:",omitempty"`
							C_ZAB     string   `xml:",omitempty" json:",omitempty"`
							DS1_PR    string   `xml:",omitempty" json:",omitempty"`
							DS_ONK    string   `xml:",omitempty" json:",omitempty"`
							PR_D_N    string   `xml:",omitempty" json:",omitempty"`
							DN        string   `xml:",omitempty" json:",omitempty"`
							CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
							CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
							DS2_N     []struct {
								DS2      string `xml:",omitempty" json:",omitempty"`
								DS2_PR   string `xml:",omitempty" json:",omitempty"`
								PR_DS2_N string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							NAZ []struct {
								NAZ_N     string `xml:",omitempty" json:",omitempty"`
								NAZ_R     string `xml:",omitempty" json:",omitempty"`
								NAZ_SP    string `xml:",omitempty" json:",omitempty"`
								NAZ_V     string `xml:",omitempty" json:",omitempty"`
								NAZ_USL   string `xml:",omitempty" json:",omitempty"`
								NAPR_DATE string `xml:",omitempty" json:",omitempty"`
								NAPR_MO   string `xml:",omitempty" json:",omitempty"`
								NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
								NAZ_PK    string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							NAPR []struct {
								NAPR_DATE string `xml:",omitempty" json:",omitempty"`
								NAPR_MO   string `xml:",omitempty" json:",omitempty"`
								NAPR_V    string `xml:",omitempty" json:",omitempty"`
								MET_ISSL  string `xml:",omitempty" json:",omitempty"`
								NAPR_USL  string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							CONS []struct {
								PR_CONS string `xml:",omitempty" json:",omitempty"`
								DT_CONS string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							ONK_SL []struct {
								DS1_T  string `xml:",omitempty" json:",omitempty"`
								STAD   string `xml:",omitempty" json:",omitempty"`
								ONK_T  string `xml:",omitempty" json:",omitempty"`
								ONK_N  string `xml:",omitempty" json:",omitempty"`
								ONK_M  string `xml:",omitempty" json:",omitempty"`
								MTSTZ  string `xml:",omitempty" json:",omitempty"`
								SOD    string `xml:",omitempty" json:",omitempty"`
								K_FR   string `xml:",omitempty" json:",omitempty"`
								WEI    string `xml:",omitempty" json:",omitempty"`
								HEI    string `xml:",omitempty" json:",omitempty"`
								BSA    string `xml:",omitempty" json:",omitempty"`
								B_DIAG []struct {
									DIAG_DATE string `xml:",omitempty" json:",omitempty"`
									DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
									DIAG_CODE string `xml:",omitempty" json:",omitempty"`
									DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
									REC_RSLT  string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								B_PROT []struct {
									PROT   string `xml:",omitempty" json:",omitempty"`
									D_PROT string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								ONK_USL []struct {
									USL_TIP   string `xml:",omitempty" json:",omitempty"`
									HIR_TIP   string `xml:",omitempty" json:",omitempty"`
									LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
									LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
									LEK_PR    []struct {
										REGNUM   string `xml:",omitempty" json:",omitempty"`
										CODE_SH  string `xml:",omitempty" json:",omitempty"`
										DATE_INJ []string
									} `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
								PPTR     string `xml:",omitempty" json:",omitempty"`
								LUCH_TIP string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							KSG_KPG []struct {
								N_KSG   string `xml:",omitempty" json:",omitempty"`
								VER_KSG string `xml:",omitempty" json:",omitempty"`
								KSG_PG  string `xml:",omitempty" json:",omitempty"`
								N_KPG   string `xml:",omitempty" json:",omitempty"`
								KOEF_Z  string `xml:",omitempty" json:",omitempty"`
								KOEF_UP string `xml:",omitempty" json:",omitempty"`
								BZTSZ   string `xml:",omitempty" json:",omitempty"`
								KOEF_D  string `xml:",omitempty" json:",omitempty"`
								KOEF_U  string `xml:",omitempty" json:",omitempty"`
								CRIT    []string
								SL_K    string `xml:",omitempty" json:",omitempty"`
								IT_SL   string `xml:",omitempty" json:",omitempty"`
								SL_KOEF []struct {
									IDSL string `xml:",omitempty" json:",omitempty"`
									Z_SL string `xml:",omitempty" json:",omitempty"`
								} `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							REAB      string  `xml:",omitempty" json:",omitempty"`
							PRVS      string  `xml:",omitempty" json:",omitempty"`
							VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
							IDDOKT    string  `xml:",omitempty" json:",omitempty"`
							ED_COL    string  `xml:",omitempty" json:",omitempty"`
							TARIF     float32 `xml:",omitempty" json:",omitempty"`
							SUM_M     float32
							USL       []struct {
								IDSERV   string  `xml:",omitempty" json:",omitempty"`
								LPU      string  `xml:",omitempty" json:",omitempty"`
								LPU_1    string  `xml:",omitempty" json:",omitempty"`
								PODR     string  `xml:",omitempty" json:",omitempty"`
								PROFIL   string  `xml:",omitempty" json:",omitempty"`
								VID_VME  string  `xml:",omitempty" json:",omitempty"`
								DET      string  `xml:",omitempty" json:",omitempty"`
								DATE_IN  string  `xml:",omitempty" json:",omitempty"`
								DATE_OUT string  `xml:",omitempty" json:",omitempty"`
								DS       string  `xml:",omitempty" json:",omitempty"`
								P_OTK    string  `xml:",omitempty" json:",omitempty"`
								CODE_USL string  `xml:",omitempty" json:",omitempty"`
								KOL_USL  string  `xml:",omitempty" json:",omitempty"`
								TARIF    float32 `xml:",omitempty" json:",omitempty"`
								SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
								PRVS     string  `xml:",omitempty" json:",omitempty"`
								CODE_MD  string  `xml:",omitempty" json:",omitempty"`
								NPL      string  `xml:",omitempty" json:",omitempty"`
								COMENTU  string  `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							COMENTSL string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.SL = (out.SL)[:0]
				}
				for !in.IsDelim(']') {
					var v9 struct {
						SL_ID     string
						VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
						METOD_HMP string   `xml:",omitempty" json:",omitempty"`
						LPU_1     string   `xml:",omitempty" json:",omitempty"`
						PODR      string   `xml:",omitempty" json:",omitempty"`
						PROFIL    string   `xml:",omitempty" json:",omitempty"`
						PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
						DET       string   `xml:",omitempty" json:",omitempty"`
						TAL_D     string   `xml:",omitempty" json:",omitempty"`
						TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
						TAL_P     string   `xml:",omitempty" json:",omitempty"`
						P_CEL     string   `xml:",omitempty" json:",omitempty"`
						NHISTORY  string   `xml:",omitempty" json:",omitempty"`
						P_PER     string   `xml:",omitempty" json:",omitempty"`
						DATE_1    string   `xml:",omitempty" json:",omitempty"`
						DATE_2    string   `xml:",omitempty" json:",omitempty"`
						KD        string   `xml:",omitempty" json:",omitempty"`
						DS0       string   `xml:",omitempty" json:",omitempty"`
						DS1       string   `xml:",omitempty" json:",omitempty"`
						DS2       []string `xml:",omitempty" json:",omitempty"`
						DS3       []string `xml:",omitempty" json:",omitempty"`
						C_ZAB     string   `xml:",omitempty" json:",omitempty"`
						DS1_PR    string   `xml:",omitempty" json:",omitempty"`
						DS_ONK    string   `xml:",omitempty" json:",omitempty"`
						PR_D_N    string   `xml:",omitempty" json:",omitempty"`
						DN        string   `xml:",omitempty" json:",omitempty"`
						CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
						CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
						DS2_N     []struct {
							DS2      string `xml:",omitempty" json:",omitempty"`
							DS2_PR   string `xml:",omitempty" json:",omitempty"`
							PR_DS2_N string `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						NAZ []struct {
							NAZ_N     string `xml:",omitempty" json:",omitempty"`
							NAZ_R     string `xml:",omitempty" json:",omitempty"`
							NAZ_SP    string `xml:",omitempty" json:",omitempty"`
							NAZ_V     string `xml:",omitempty" json:",omitempty"`
							NAZ_USL   string `xml:",omitempty" json:",omitempty"`
							NAPR_DATE string `xml:",omitempty" json:",omitempty"`
							NAPR_MO   string `xml:",omitempty" json:",omitempty"`
							NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
							NAZ_PK    string `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						NAPR []struct {
							NAPR_DATE string `xml:",omitempty" json:",omitempty"`
							NAPR_MO   string `xml:",omitempty" json:",omitempty"`
							NAPR_V    string `xml:",omitempty" json:",omitempty"`
							MET_ISSL  string `xml:",omitempty" json:",omitempty"`
							NAPR_USL  string `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						CONS []struct {
							PR_CONS string `xml:",omitempty" json:",omitempty"`
							DT_CONS string `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						ONK_SL []struct {
							DS1_T  string `xml:",omitempty" json:",omitempty"`
							STAD   string `xml:",omitempty" json:",omitempty"`
							ONK_T  string `xml:",omitempty" json:",omitempty"`
							ONK_N  string `xml:",omitempty" json:",omitempty"`
							ONK_M  string `xml:",omitempty" json:",omitempty"`
							MTSTZ  string `xml:",omitempty" json:",omitempty"`
							SOD    string `xml:",omitempty" json:",omitempty"`
							K_FR   string `xml:",omitempty" json:",omitempty"`
							WEI    string `xml:",omitempty" json:",omitempty"`
							HEI    string `xml:",omitempty" json:",omitempty"`
							BSA    string `xml:",omitempty" json:",omitempty"`
							B_DIAG []struct {
								DIAG_DATE string `xml:",omitempty" json:",omitempty"`
								DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
								DIAG_CODE string `xml:",omitempty" json:",omitempty"`
								DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
								REC_RSLT  string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							B_PROT []struct {
								PROT   string `xml:",omitempty" json:",omitempty"`
								D_PROT string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							ONK_USL []struct {
								USL_TIP   string `xml:",omitempty" json:",omitempty"`
								HIR_TIP   string `xml:",omitempty" json:",omitempty"`
								LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
								LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
								LEK_PR    []struct {
									REGNUM   string `xml:",omitempty" json:",omitempty"`
									CODE_SH  string `xml:",omitempty" json:",omitempty"`
									DATE_INJ []string
								} `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							PPTR     string `xml:",omitempty" json:",omitempty"`
							LUCH_TIP string `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						KSG_KPG []struct {
							N_KSG   string `xml:",omitempty" json:",omitempty"`
							VER_KSG string `xml:",omitempty" json:",omitempty"`
							KSG_PG  string `xml:",omitempty" json:",omitempty"`
							N_KPG   string `xml:",omitempty" json:",omitempty"`
							KOEF_Z  string `xml:",omitempty" json:",omitempty"`
							KOEF_UP string `xml:",omitempty" json:",omitempty"`
							BZTSZ   string `xml:",omitempty" json:",omitempty"`
							KOEF_D  string `xml:",omitempty" json:",omitempty"`
							KOEF_U  string `xml:",omitempty" json:",omitempty"`
							CRIT    []string
							SL_K    string `xml:",omitempty" json:",omitempty"`
							IT_SL   string `xml:",omitempty" json:",omitempty"`
							SL_KOEF []struct {
								IDSL string `xml:",omitempty" json:",omitempty"`
								Z_SL string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						REAB      string  `xml:",omitempty" json:",omitempty"`
						PRVS      string  `xml:",omitempty" json:",omitempty"`
						VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
						IDDOKT    string  `xml:",omitempty" json:",omitempty"`
						ED_COL    string  `xml:",omitempty" json:",omitempty"`
						TARIF     float32 `xml:",omitempty" json:",omitempty"`
						SUM_M     float32
						USL       []struct {
							IDSERV   string  `xml:",omitempty" json:",omitempty"`
							LPU      string  `xml:",omitempty" json:",omitempty"`
							LPU_1    string  `xml:",omitempty" json:",omitempty"`
							PODR     string  `xml:",omitempty" json:",omitempty"`
							PROFIL   string  `xml:",omitempty" json:",omitempty"`
							VID_VME  string  `xml:",omitempty" json:",omitempty"`
							DET      string  `xml:",omitempty" json:",omitempty"`
							DATE_IN  string  `xml:",omitempty" json:",omitempty"`
							DATE_OUT string  `xml:",omitempty" json:",omitempty"`
							DS       string  `xml:",omitempty" json:",omitempty"`
							P_OTK    string  `xml:",omitempty" json:",omitempty"`
							CODE_USL string  `xml:",omitempty" json:",omitempty"`
							KOL_USL  string  `xml:",omitempty" json:",omitempty"`
							TARIF    float32 `xml:",omitempty" json:",omitempty"`
							SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
							PRVS     string  `xml:",omitempty" json:",omitempty"`
							CODE_MD  string  `xml:",omitempty" json:",omitempty"`
							NPL      string  `xml:",omitempty" json:",omitempty"`
							COMENTU  string  `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						COMENTSL string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode2(in, &v9)
					out.SL = append(out.SL, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IDSP":
			out.IDSP = string(in.String())
		case "SUMV":
			out.SUMV = float32(in.Float32())
		case "OPLATA":
			out.OPLATA = string(in.String())
		case "SUMP":
			out.SUMP = float32(in.Float32())
		case "SANK":
			if in.IsNull() {
				in.Skip()
				out.SANK = nil
			} else {
				in.Delim('[')
				if out.SANK == nil {
					if !in.IsDelim(']') {
						out.SANK = make([]struct {
							S_CODE   string  `xml:",omitempty" json:",omitempty"`
							S_SUM    float32 `xml:",omitempty" json:",omitempty"`
							S_TIP    string  `xml:",omitempty" json:",omitempty"`
							SL_ID    string  `xml:",omitempty" json:",omitempty"`
							S_OSN    string  `xml:",omitempty" json:",omitempty"`
							DATE_ACT string  `xml:",omitempty" json:",omitempty"`
							NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
							CODE_EXP string  `xml:",omitempty" json:",omitempty"`
							S_COM    string  `xml:",omitempty" json:",omitempty"`
							S_IST    string  `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.SANK = []struct {
							S_CODE   string  `xml:",omitempty" json:",omitempty"`
							S_SUM    float32 `xml:",omitempty" json:",omitempty"`
							S_TIP    string  `xml:",omitempty" json:",omitempty"`
							SL_ID    string  `xml:",omitempty" json:",omitempty"`
							S_OSN    string  `xml:",omitempty" json:",omitempty"`
							DATE_ACT string  `xml:",omitempty" json:",omitempty"`
							NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
							CODE_EXP string  `xml:",omitempty" json:",omitempty"`
							S_COM    string  `xml:",omitempty" json:",omitempty"`
							S_IST    string  `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.SANK = (out.SANK)[:0]
				}
				for !in.IsDelim(']') {
					var v10 struct {
						S_CODE   string  `xml:",omitempty" json:",omitempty"`
						S_SUM    float32 `xml:",omitempty" json:",omitempty"`
						S_TIP    string  `xml:",omitempty" json:",omitempty"`
						SL_ID    string  `xml:",omitempty" json:",omitempty"`
						S_OSN    string  `xml:",omitempty" json:",omitempty"`
						DATE_ACT string  `xml:",omitempty" json:",omitempty"`
						NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
						CODE_EXP string  `xml:",omitempty" json:",omitempty"`
						S_COM    string  `xml:",omitempty" json:",omitempty"`
						S_IST    string  `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode3(in, &v10)
					out.SANK = append(out.SANK, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SANK_IT":
			out.SANK_IT = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode1(out *jwriter.Writer, in struct {
	IDCASE   string   `xml:",omitempty" json:",omitempty"`
	USL_OK   string   `xml:",omitempty" json:",omitempty"`
	VIDPOM   string   `xml:",omitempty" json:",omitempty"`
	FOR_POM  string   `xml:",omitempty" json:",omitempty"`
	NPR_MO   string   `xml:",omitempty" json:",omitempty"`
	NPR_DATE string   `xml:",omitempty" json:",omitempty"`
	LPU      string   `xml:",omitempty" json:",omitempty"`
	VBR      string   `xml:",omitempty" json:",omitempty"`
	DATE_Z_1 string   `xml:",omitempty" json:",omitempty"`
	DATE_Z_2 string   `xml:",omitempty" json:",omitempty"`
	KD_Z     string   `xml:",omitempty" json:",omitempty"`
	VNOV_M   []string `xml:",omitempty" json:",omitempty"`
	RSLT     string   `xml:",omitempty" json:",omitempty"`
	ISHOD    string   `xml:",omitempty" json:",omitempty"`
	P_OTK    string   `xml:",omitempty" json:",omitempty"`
	RSLT_D   string   `xml:",omitempty" json:",omitempty"`
	OS_SLUCH []string `xml:",omitempty" json:",omitempty"`
	VB_P     string   `xml:",omitempty" json:",omitempty"`
	SL       []struct {
		SL_ID     string
		VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
		METOD_HMP string   `xml:",omitempty" json:",omitempty"`
		LPU_1     string   `xml:",omitempty" json:",omitempty"`
		PODR      string   `xml:",omitempty" json:",omitempty"`
		PROFIL    string   `xml:",omitempty" json:",omitempty"`
		PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
		DET       string   `xml:",omitempty" json:",omitempty"`
		TAL_D     string   `xml:",omitempty" json:",omitempty"`
		TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
		TAL_P     string   `xml:",omitempty" json:",omitempty"`
		P_CEL     string   `xml:",omitempty" json:",omitempty"`
		NHISTORY  string   `xml:",omitempty" json:",omitempty"`
		P_PER     string   `xml:",omitempty" json:",omitempty"`
		DATE_1    string   `xml:",omitempty" json:",omitempty"`
		DATE_2    string   `xml:",omitempty" json:",omitempty"`
		KD        string   `xml:",omitempty" json:",omitempty"`
		DS0       string   `xml:",omitempty" json:",omitempty"`
		DS1       string   `xml:",omitempty" json:",omitempty"`
		DS2       []string `xml:",omitempty" json:",omitempty"`
		DS3       []string `xml:",omitempty" json:",omitempty"`
		C_ZAB     string   `xml:",omitempty" json:",omitempty"`
		DS1_PR    string   `xml:",omitempty" json:",omitempty"`
		DS_ONK    string   `xml:",omitempty" json:",omitempty"`
		PR_D_N    string   `xml:",omitempty" json:",omitempty"`
		DN        string   `xml:",omitempty" json:",omitempty"`
		CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
		CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
		DS2_N     []struct {
			DS2      string `xml:",omitempty" json:",omitempty"`
			DS2_PR   string `xml:",omitempty" json:",omitempty"`
			PR_DS2_N string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		NAZ []struct {
			NAZ_N     string `xml:",omitempty" json:",omitempty"`
			NAZ_R     string `xml:",omitempty" json:",omitempty"`
			NAZ_SP    string `xml:",omitempty" json:",omitempty"`
			NAZ_V     string `xml:",omitempty" json:",omitempty"`
			NAZ_USL   string `xml:",omitempty" json:",omitempty"`
			NAPR_DATE string `xml:",omitempty" json:",omitempty"`
			NAPR_MO   string `xml:",omitempty" json:",omitempty"`
			NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
			NAZ_PK    string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		NAPR []struct {
			NAPR_DATE string `xml:",omitempty" json:",omitempty"`
			NAPR_MO   string `xml:",omitempty" json:",omitempty"`
			NAPR_V    string `xml:",omitempty" json:",omitempty"`
			MET_ISSL  string `xml:",omitempty" json:",omitempty"`
			NAPR_USL  string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		CONS []struct {
			PR_CONS string `xml:",omitempty" json:",omitempty"`
			DT_CONS string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		ONK_SL []struct {
			DS1_T  string `xml:",omitempty" json:",omitempty"`
			STAD   string `xml:",omitempty" json:",omitempty"`
			ONK_T  string `xml:",omitempty" json:",omitempty"`
			ONK_N  string `xml:",omitempty" json:",omitempty"`
			ONK_M  string `xml:",omitempty" json:",omitempty"`
			MTSTZ  string `xml:",omitempty" json:",omitempty"`
			SOD    string `xml:",omitempty" json:",omitempty"`
			K_FR   string `xml:",omitempty" json:",omitempty"`
			WEI    string `xml:",omitempty" json:",omitempty"`
			HEI    string `xml:",omitempty" json:",omitempty"`
			BSA    string `xml:",omitempty" json:",omitempty"`
			B_DIAG []struct {
				DIAG_DATE string `xml:",omitempty" json:",omitempty"`
				DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
				DIAG_CODE string `xml:",omitempty" json:",omitempty"`
				DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
				REC_RSLT  string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			B_PROT []struct {
				PROT   string `xml:",omitempty" json:",omitempty"`
				D_PROT string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			ONK_USL []struct {
				USL_TIP   string `xml:",omitempty" json:",omitempty"`
				HIR_TIP   string `xml:",omitempty" json:",omitempty"`
				LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
				LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
				LEK_PR    []struct {
					REGNUM   string `xml:",omitempty" json:",omitempty"`
					CODE_SH  string `xml:",omitempty" json:",omitempty"`
					DATE_INJ []string
				} `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
			PPTR     string `xml:",omitempty" json:",omitempty"`
			LUCH_TIP string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		KSG_KPG []struct {
			N_KSG   string `xml:",omitempty" json:",omitempty"`
			VER_KSG string `xml:",omitempty" json:",omitempty"`
			KSG_PG  string `xml:",omitempty" json:",omitempty"`
			N_KPG   string `xml:",omitempty" json:",omitempty"`
			KOEF_Z  string `xml:",omitempty" json:",omitempty"`
			KOEF_UP string `xml:",omitempty" json:",omitempty"`
			BZTSZ   string `xml:",omitempty" json:",omitempty"`
			KOEF_D  string `xml:",omitempty" json:",omitempty"`
			KOEF_U  string `xml:",omitempty" json:",omitempty"`
			CRIT    []string
			SL_K    string `xml:",omitempty" json:",omitempty"`
			IT_SL   string `xml:",omitempty" json:",omitempty"`
			SL_KOEF []struct {
				IDSL string `xml:",omitempty" json:",omitempty"`
				Z_SL string `xml:",omitempty" json:",omitempty"`
			} `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		REAB      string  `xml:",omitempty" json:",omitempty"`
		PRVS      string  `xml:",omitempty" json:",omitempty"`
		VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
		IDDOKT    string  `xml:",omitempty" json:",omitempty"`
		ED_COL    string  `xml:",omitempty" json:",omitempty"`
		TARIF     float32 `xml:",omitempty" json:",omitempty"`
		SUM_M     float32
		USL       []struct {
			IDSERV   string  `xml:",omitempty" json:",omitempty"`
			LPU      string  `xml:",omitempty" json:",omitempty"`
			LPU_1    string  `xml:",omitempty" json:",omitempty"`
			PODR     string  `xml:",omitempty" json:",omitempty"`
			PROFIL   string  `xml:",omitempty" json:",omitempty"`
			VID_VME  string  `xml:",omitempty" json:",omitempty"`
			DET      string  `xml:",omitempty" json:",omitempty"`
			DATE_IN  string  `xml:",omitempty" json:",omitempty"`
			DATE_OUT string  `xml:",omitempty" json:",omitempty"`
			DS       string  `xml:",omitempty" json:",omitempty"`
			P_OTK    string  `xml:",omitempty" json:",omitempty"`
			CODE_USL string  `xml:",omitempty" json:",omitempty"`
			KOL_USL  string  `xml:",omitempty" json:",omitempty"`
			TARIF    float32 `xml:",omitempty" json:",omitempty"`
			SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
			PRVS     string  `xml:",omitempty" json:",omitempty"`
			CODE_MD  string  `xml:",omitempty" json:",omitempty"`
			NPL      string  `xml:",omitempty" json:",omitempty"`
			COMENTU  string  `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		COMENTSL string `xml:",omitempty" json:",omitempty"`
	}
	IDSP   string  `xml:",omitempty" json:",omitempty"`
	SUMV   float32 `xml:",omitempty" json:",omitempty"`
	OPLATA string  `xml:",omitempty" json:",omitempty"`
	SUMP   float32 `xml:",omitempty" json:",omitempty"`
	SANK   []struct {
		S_CODE   string  `xml:",omitempty" json:",omitempty"`
		S_SUM    float32 `xml:",omitempty" json:",omitempty"`
		S_TIP    string  `xml:",omitempty" json:",omitempty"`
		SL_ID    string  `xml:",omitempty" json:",omitempty"`
		S_OSN    string  `xml:",omitempty" json:",omitempty"`
		DATE_ACT string  `xml:",omitempty" json:",omitempty"`
		NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
		CODE_EXP string  `xml:",omitempty" json:",omitempty"`
		S_COM    string  `xml:",omitempty" json:",omitempty"`
		S_IST    string  `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	SANK_IT string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IDCASE != "" {
		const prefix string = ",\"IDCASE\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.IDCASE))
	}
	if in.USL_OK != "" {
		const prefix string = ",\"USL_OK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.USL_OK))
	}
	if in.VIDPOM != "" {
		const prefix string = ",\"VIDPOM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VIDPOM))
	}
	if in.FOR_POM != "" {
		const prefix string = ",\"FOR_POM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FOR_POM))
	}
	if in.NPR_MO != "" {
		const prefix string = ",\"NPR_MO\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NPR_MO))
	}
	if in.NPR_DATE != "" {
		const prefix string = ",\"NPR_DATE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NPR_DATE))
	}
	if in.LPU != "" {
		const prefix string = ",\"LPU\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LPU))
	}
	if in.VBR != "" {
		const prefix string = ",\"VBR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VBR))
	}
	if in.DATE_Z_1 != "" {
		const prefix string = ",\"DATE_Z_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DATE_Z_1))
	}
	if in.DATE_Z_2 != "" {
		const prefix string = ",\"DATE_Z_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DATE_Z_2))
	}
	if in.KD_Z != "" {
		const prefix string = ",\"KD_Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KD_Z))
	}
	if len(in.VNOV_M) != 0 {
		const prefix string = ",\"VNOV_M\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.VNOV_M {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.RSLT != "" {
		const prefix string = ",\"RSLT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RSLT))
	}
	if in.ISHOD != "" {
		const prefix string = ",\"ISHOD\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ISHOD))
	}
	if in.P_OTK != "" {
		const prefix string = ",\"P_OTK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.P_OTK))
	}
	if in.RSLT_D != "" {
		const prefix string = ",\"RSLT_D\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RSLT_D))
	}
	if len(in.OS_SLUCH) != 0 {
		const prefix string = ",\"OS_SLUCH\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.OS_SLUCH {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if in.VB_P != "" {
		const prefix string = ",\"VB_P\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VB_P))
	}
	{
		const prefix string = ",\"SL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SL == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.SL {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode2(out, v16)
			}
			out.RawByte(']')
		}
	}
	if in.IDSP != "" {
		const prefix string = ",\"IDSP\":"
		out.RawString(prefix)
		out.String(string(in.IDSP))
	}
	if in.SUMV != 0 {
		const prefix string = ",\"SUMV\":"
		out.RawString(prefix)
		out.Float32(float32(in.SUMV))
	}
	if in.OPLATA != "" {
		const prefix string = ",\"OPLATA\":"
		out.RawString(prefix)
		out.String(string(in.OPLATA))
	}
	if in.SUMP != 0 {
		const prefix string = ",\"SUMP\":"
		out.RawString(prefix)
		out.Float32(float32(in.SUMP))
	}
	if len(in.SANK) != 0 {
		const prefix string = ",\"SANK\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.SANK {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode3(out, v18)
			}
			out.RawByte(']')
		}
	}
	if in.SANK_IT != "" {
		const prefix string = ",\"SANK_IT\":"
		out.RawString(prefix)
		out.String(string(in.SANK_IT))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode3(in *jlexer.Lexer, out *struct {
	S_CODE   string  `xml:",omitempty" json:",omitempty"`
	S_SUM    float32 `xml:",omitempty" json:",omitempty"`
	S_TIP    string  `xml:",omitempty" json:",omitempty"`
	SL_ID    string  `xml:",omitempty" json:",omitempty"`
	S_OSN    string  `xml:",omitempty" json:",omitempty"`
	DATE_ACT string  `xml:",omitempty" json:",omitempty"`
	NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
	CODE_EXP string  `xml:",omitempty" json:",omitempty"`
	S_COM    string  `xml:",omitempty" json:",omitempty"`
	S_IST    string  `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "S_CODE":
			out.S_CODE = string(in.String())
		case "S_SUM":
			out.S_SUM = float32(in.Float32())
		case "S_TIP":
			out.S_TIP = string(in.String())
		case "SL_ID":
			out.SL_ID = string(in.String())
		case "S_OSN":
			out.S_OSN = string(in.String())
		case "DATE_ACT":
			out.DATE_ACT = string(in.String())
		case "NUM_ACT":
			out.NUM_ACT = string(in.String())
		case "CODE_EXP":
			out.CODE_EXP = string(in.String())
		case "S_COM":
			out.S_COM = string(in.String())
		case "S_IST":
			out.S_IST = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode3(out *jwriter.Writer, in struct {
	S_CODE   string  `xml:",omitempty" json:",omitempty"`
	S_SUM    float32 `xml:",omitempty" json:",omitempty"`
	S_TIP    string  `xml:",omitempty" json:",omitempty"`
	SL_ID    string  `xml:",omitempty" json:",omitempty"`
	S_OSN    string  `xml:",omitempty" json:",omitempty"`
	DATE_ACT string  `xml:",omitempty" json:",omitempty"`
	NUM_ACT  string  `xml:",omitempty" json:",omitempty"`
	CODE_EXP string  `xml:",omitempty" json:",omitempty"`
	S_COM    string  `xml:",omitempty" json:",omitempty"`
	S_IST    string  `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.S_CODE != "" {
		const prefix string = ",\"S_CODE\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.S_CODE))
	}
	if in.S_SUM != 0 {
		const prefix string = ",\"S_SUM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.S_SUM))
	}
	if in.S_TIP != "" {
		const prefix string = ",\"S_TIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.S_TIP))
	}
	if in.SL_ID != "" {
		const prefix string = ",\"SL_ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SL_ID))
	}
	if in.S_OSN != "" {
		const prefix string = ",\"S_OSN\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.S_OSN))
	}
	if in.DATE_ACT != "" {
		const prefix string = ",\"DATE_ACT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DATE_ACT))
	}
	if in.NUM_ACT != "" {
		const prefix string = ",\"NUM_ACT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NUM_ACT))
	}
	if in.CODE_EXP != "" {
		const prefix string = ",\"CODE_EXP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CODE_EXP))
	}
	if in.S_COM != "" {
		const prefix string = ",\"S_COM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.S_COM))
	}
	if in.S_IST != "" {
		const prefix string = ",\"S_IST\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.S_IST))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode2(in *jlexer.Lexer, out *struct {
	SL_ID     string
	VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
	METOD_HMP string   `xml:",omitempty" json:",omitempty"`
	LPU_1     string   `xml:",omitempty" json:",omitempty"`
	PODR      string   `xml:",omitempty" json:",omitempty"`
	PROFIL    string   `xml:",omitempty" json:",omitempty"`
	PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
	DET       string   `xml:",omitempty" json:",omitempty"`
	TAL_D     string   `xml:",omitempty" json:",omitempty"`
	TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
	TAL_P     string   `xml:",omitempty" json:",omitempty"`
	P_CEL     string   `xml:",omitempty" json:",omitempty"`
	NHISTORY  string   `xml:",omitempty" json:",omitempty"`
	P_PER     string   `xml:",omitempty" json:",omitempty"`
	DATE_1    string   `xml:",omitempty" json:",omitempty"`
	DATE_2    string   `xml:",omitempty" json:",omitempty"`
	KD        string   `xml:",omitempty" json:",omitempty"`
	DS0       string   `xml:",omitempty" json:",omitempty"`
	DS1       string   `xml:",omitempty" json:",omitempty"`
	DS2       []string `xml:",omitempty" json:",omitempty"`
	DS3       []string `xml:",omitempty" json:",omitempty"`
	C_ZAB     string   `xml:",omitempty" json:",omitempty"`
	DS1_PR    string   `xml:",omitempty" json:",omitempty"`
	DS_ONK    string   `xml:",omitempty" json:",omitempty"`
	PR_D_N    string   `xml:",omitempty" json:",omitempty"`
	DN        string   `xml:",omitempty" json:",omitempty"`
	CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
	CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
	DS2_N     []struct {
		DS2      string `xml:",omitempty" json:",omitempty"`
		DS2_PR   string `xml:",omitempty" json:",omitempty"`
		PR_DS2_N string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	NAZ []struct {
		NAZ_N     string `xml:",omitempty" json:",omitempty"`
		NAZ_R     string `xml:",omitempty" json:",omitempty"`
		NAZ_SP    string `xml:",omitempty" json:",omitempty"`
		NAZ_V     string `xml:",omitempty" json:",omitempty"`
		NAZ_USL   string `xml:",omitempty" json:",omitempty"`
		NAPR_DATE string `xml:",omitempty" json:",omitempty"`
		NAPR_MO   string `xml:",omitempty" json:",omitempty"`
		NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
		NAZ_PK    string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	NAPR []struct {
		NAPR_DATE string `xml:",omitempty" json:",omitempty"`
		NAPR_MO   string `xml:",omitempty" json:",omitempty"`
		NAPR_V    string `xml:",omitempty" json:",omitempty"`
		MET_ISSL  string `xml:",omitempty" json:",omitempty"`
		NAPR_USL  string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	CONS []struct {
		PR_CONS string `xml:",omitempty" json:",omitempty"`
		DT_CONS string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	ONK_SL []struct {
		DS1_T  string `xml:",omitempty" json:",omitempty"`
		STAD   string `xml:",omitempty" json:",omitempty"`
		ONK_T  string `xml:",omitempty" json:",omitempty"`
		ONK_N  string `xml:",omitempty" json:",omitempty"`
		ONK_M  string `xml:",omitempty" json:",omitempty"`
		MTSTZ  string `xml:",omitempty" json:",omitempty"`
		SOD    string `xml:",omitempty" json:",omitempty"`
		K_FR   string `xml:",omitempty" json:",omitempty"`
		WEI    string `xml:",omitempty" json:",omitempty"`
		HEI    string `xml:",omitempty" json:",omitempty"`
		BSA    string `xml:",omitempty" json:",omitempty"`
		B_DIAG []struct {
			DIAG_DATE string `xml:",omitempty" json:",omitempty"`
			DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
			DIAG_CODE string `xml:",omitempty" json:",omitempty"`
			DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
			REC_RSLT  string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		B_PROT []struct {
			PROT   string `xml:",omitempty" json:",omitempty"`
			D_PROT string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		ONK_USL []struct {
			USL_TIP   string `xml:",omitempty" json:",omitempty"`
			HIR_TIP   string `xml:",omitempty" json:",omitempty"`
			LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
			LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
			LEK_PR    []struct {
				REGNUM   string `xml:",omitempty" json:",omitempty"`
				CODE_SH  string `xml:",omitempty" json:",omitempty"`
				DATE_INJ []string
			} `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		PPTR     string `xml:",omitempty" json:",omitempty"`
		LUCH_TIP string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	KSG_KPG []struct {
		N_KSG   string `xml:",omitempty" json:",omitempty"`
		VER_KSG string `xml:",omitempty" json:",omitempty"`
		KSG_PG  string `xml:",omitempty" json:",omitempty"`
		N_KPG   string `xml:",omitempty" json:",omitempty"`
		KOEF_Z  string `xml:",omitempty" json:",omitempty"`
		KOEF_UP string `xml:",omitempty" json:",omitempty"`
		BZTSZ   string `xml:",omitempty" json:",omitempty"`
		KOEF_D  string `xml:",omitempty" json:",omitempty"`
		KOEF_U  string `xml:",omitempty" json:",omitempty"`
		CRIT    []string
		SL_K    string `xml:",omitempty" json:",omitempty"`
		IT_SL   string `xml:",omitempty" json:",omitempty"`
		SL_KOEF []struct {
			IDSL string `xml:",omitempty" json:",omitempty"`
			Z_SL string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	REAB      string  `xml:",omitempty" json:",omitempty"`
	PRVS      string  `xml:",omitempty" json:",omitempty"`
	VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
	IDDOKT    string  `xml:",omitempty" json:",omitempty"`
	ED_COL    string  `xml:",omitempty" json:",omitempty"`
	TARIF     float32 `xml:",omitempty" json:",omitempty"`
	SUM_M     float32
	USL       []struct {
		IDSERV   string  `xml:",omitempty" json:",omitempty"`
		LPU      string  `xml:",omitempty" json:",omitempty"`
		LPU_1    string  `xml:",omitempty" json:",omitempty"`
		PODR     string  `xml:",omitempty" json:",omitempty"`
		PROFIL   string  `xml:",omitempty" json:",omitempty"`
		VID_VME  string  `xml:",omitempty" json:",omitempty"`
		DET      string  `xml:",omitempty" json:",omitempty"`
		DATE_IN  string  `xml:",omitempty" json:",omitempty"`
		DATE_OUT string  `xml:",omitempty" json:",omitempty"`
		DS       string  `xml:",omitempty" json:",omitempty"`
		P_OTK    string  `xml:",omitempty" json:",omitempty"`
		CODE_USL string  `xml:",omitempty" json:",omitempty"`
		KOL_USL  string  `xml:",omitempty" json:",omitempty"`
		TARIF    float32 `xml:",omitempty" json:",omitempty"`
		SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
		PRVS     string  `xml:",omitempty" json:",omitempty"`
		CODE_MD  string  `xml:",omitempty" json:",omitempty"`
		NPL      string  `xml:",omitempty" json:",omitempty"`
		COMENTU  string  `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	COMENTSL string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SL_ID":
			out.SL_ID = string(in.String())
		case "VOD_HMP":
			out.VOD_HMP = string(in.String())
		case "METOD_HMP":
			out.METOD_HMP = string(in.String())
		case "LPU_1":
			out.LPU_1 = string(in.String())
		case "PODR":
			out.PODR = string(in.String())
		case "PROFIL":
			out.PROFIL = string(in.String())
		case "PROFIL_K":
			out.PROFIL_K = string(in.String())
		case "DET":
			out.DET = string(in.String())
		case "TAL_D":
			out.TAL_D = string(in.String())
		case "TAL_NUM":
			out.TAL_NUM = string(in.String())
		case "TAL_P":
			out.TAL_P = string(in.String())
		case "P_CEL":
			out.P_CEL = string(in.String())
		case "NHISTORY":
			out.NHISTORY = string(in.String())
		case "P_PER":
			out.P_PER = string(in.String())
		case "DATE_1":
			out.DATE_1 = string(in.String())
		case "DATE_2":
			out.DATE_2 = string(in.String())
		case "KD":
			out.KD = string(in.String())
		case "DS0":
			out.DS0 = string(in.String())
		case "DS1":
			out.DS1 = string(in.String())
		case "DS2":
			if in.IsNull() {
				in.Skip()
				out.DS2 = nil
			} else {
				in.Delim('[')
				if out.DS2 == nil {
					if !in.IsDelim(']') {
						out.DS2 = make([]string, 0, 4)
					} else {
						out.DS2 = []string{}
					}
				} else {
					out.DS2 = (out.DS2)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.DS2 = append(out.DS2, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DS3":
			if in.IsNull() {
				in.Skip()
				out.DS3 = nil
			} else {
				in.Delim('[')
				if out.DS3 == nil {
					if !in.IsDelim(']') {
						out.DS3 = make([]string, 0, 4)
					} else {
						out.DS3 = []string{}
					}
				} else {
					out.DS3 = (out.DS3)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.DS3 = append(out.DS3, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "C_ZAB":
			out.C_ZAB = string(in.String())
		case "DS1_PR":
			out.DS1_PR = string(in.String())
		case "DS_ONK":
			out.DS_ONK = string(in.String())
		case "PR_D_N":
			out.PR_D_N = string(in.String())
		case "DN":
			out.DN = string(in.String())
		case "CODE_MES1":
			if in.IsNull() {
				in.Skip()
				out.CODE_MES1 = nil
			} else {
				in.Delim('[')
				if out.CODE_MES1 == nil {
					if !in.IsDelim(']') {
						out.CODE_MES1 = make([]string, 0, 4)
					} else {
						out.CODE_MES1 = []string{}
					}
				} else {
					out.CODE_MES1 = (out.CODE_MES1)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.CODE_MES1 = append(out.CODE_MES1, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CODE_MES2":
			out.CODE_MES2 = string(in.String())
		case "DS2_N":
			if in.IsNull() {
				in.Skip()
				out.DS2_N = nil
			} else {
				in.Delim('[')
				if out.DS2_N == nil {
					if !in.IsDelim(']') {
						out.DS2_N = make([]struct {
							DS2      string `xml:",omitempty" json:",omitempty"`
							DS2_PR   string `xml:",omitempty" json:",omitempty"`
							PR_DS2_N string `xml:",omitempty" json:",omitempty"`
						}, 0, 1)
					} else {
						out.DS2_N = []struct {
							DS2      string `xml:",omitempty" json:",omitempty"`
							DS2_PR   string `xml:",omitempty" json:",omitempty"`
							PR_DS2_N string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.DS2_N = (out.DS2_N)[:0]
				}
				for !in.IsDelim(']') {
					var v22 struct {
						DS2      string `xml:",omitempty" json:",omitempty"`
						DS2_PR   string `xml:",omitempty" json:",omitempty"`
						PR_DS2_N string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode4(in, &v22)
					out.DS2_N = append(out.DS2_N, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NAZ":
			if in.IsNull() {
				in.Skip()
				out.NAZ = nil
			} else {
				in.Delim('[')
				if out.NAZ == nil {
					if !in.IsDelim(']') {
						out.NAZ = make([]struct {
							NAZ_N     string `xml:",omitempty" json:",omitempty"`
							NAZ_R     string `xml:",omitempty" json:",omitempty"`
							NAZ_SP    string `xml:",omitempty" json:",omitempty"`
							NAZ_V     string `xml:",omitempty" json:",omitempty"`
							NAZ_USL   string `xml:",omitempty" json:",omitempty"`
							NAPR_DATE string `xml:",omitempty" json:",omitempty"`
							NAPR_MO   string `xml:",omitempty" json:",omitempty"`
							NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
							NAZ_PK    string `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.NAZ = []struct {
							NAZ_N     string `xml:",omitempty" json:",omitempty"`
							NAZ_R     string `xml:",omitempty" json:",omitempty"`
							NAZ_SP    string `xml:",omitempty" json:",omitempty"`
							NAZ_V     string `xml:",omitempty" json:",omitempty"`
							NAZ_USL   string `xml:",omitempty" json:",omitempty"`
							NAPR_DATE string `xml:",omitempty" json:",omitempty"`
							NAPR_MO   string `xml:",omitempty" json:",omitempty"`
							NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
							NAZ_PK    string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.NAZ = (out.NAZ)[:0]
				}
				for !in.IsDelim(']') {
					var v23 struct {
						NAZ_N     string `xml:",omitempty" json:",omitempty"`
						NAZ_R     string `xml:",omitempty" json:",omitempty"`
						NAZ_SP    string `xml:",omitempty" json:",omitempty"`
						NAZ_V     string `xml:",omitempty" json:",omitempty"`
						NAZ_USL   string `xml:",omitempty" json:",omitempty"`
						NAPR_DATE string `xml:",omitempty" json:",omitempty"`
						NAPR_MO   string `xml:",omitempty" json:",omitempty"`
						NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
						NAZ_PK    string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode5(in, &v23)
					out.NAZ = append(out.NAZ, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NAPR":
			if in.IsNull() {
				in.Skip()
				out.NAPR = nil
			} else {
				in.Delim('[')
				if out.NAPR == nil {
					if !in.IsDelim(']') {
						out.NAPR = make([]struct {
							NAPR_DATE string `xml:",omitempty" json:",omitempty"`
							NAPR_MO   string `xml:",omitempty" json:",omitempty"`
							NAPR_V    string `xml:",omitempty" json:",omitempty"`
							MET_ISSL  string `xml:",omitempty" json:",omitempty"`
							NAPR_USL  string `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.NAPR = []struct {
							NAPR_DATE string `xml:",omitempty" json:",omitempty"`
							NAPR_MO   string `xml:",omitempty" json:",omitempty"`
							NAPR_V    string `xml:",omitempty" json:",omitempty"`
							MET_ISSL  string `xml:",omitempty" json:",omitempty"`
							NAPR_USL  string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.NAPR = (out.NAPR)[:0]
				}
				for !in.IsDelim(']') {
					var v24 struct {
						NAPR_DATE string `xml:",omitempty" json:",omitempty"`
						NAPR_MO   string `xml:",omitempty" json:",omitempty"`
						NAPR_V    string `xml:",omitempty" json:",omitempty"`
						MET_ISSL  string `xml:",omitempty" json:",omitempty"`
						NAPR_USL  string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode6(in, &v24)
					out.NAPR = append(out.NAPR, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CONS":
			if in.IsNull() {
				in.Skip()
				out.CONS = nil
			} else {
				in.Delim('[')
				if out.CONS == nil {
					if !in.IsDelim(']') {
						out.CONS = make([]struct {
							PR_CONS string `xml:",omitempty" json:",omitempty"`
							DT_CONS string `xml:",omitempty" json:",omitempty"`
						}, 0, 2)
					} else {
						out.CONS = []struct {
							PR_CONS string `xml:",omitempty" json:",omitempty"`
							DT_CONS string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.CONS = (out.CONS)[:0]
				}
				for !in.IsDelim(']') {
					var v25 struct {
						PR_CONS string `xml:",omitempty" json:",omitempty"`
						DT_CONS string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode7(in, &v25)
					out.CONS = append(out.CONS, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ONK_SL":
			if in.IsNull() {
				in.Skip()
				out.ONK_SL = nil
			} else {
				in.Delim('[')
				if out.ONK_SL == nil {
					if !in.IsDelim(']') {
						out.ONK_SL = make([]struct {
							DS1_T  string `xml:",omitempty" json:",omitempty"`
							STAD   string `xml:",omitempty" json:",omitempty"`
							ONK_T  string `xml:",omitempty" json:",omitempty"`
							ONK_N  string `xml:",omitempty" json:",omitempty"`
							ONK_M  string `xml:",omitempty" json:",omitempty"`
							MTSTZ  string `xml:",omitempty" json:",omitempty"`
							SOD    string `xml:",omitempty" json:",omitempty"`
							K_FR   string `xml:",omitempty" json:",omitempty"`
							WEI    string `xml:",omitempty" json:",omitempty"`
							HEI    string `xml:",omitempty" json:",omitempty"`
							BSA    string `xml:",omitempty" json:",omitempty"`
							B_DIAG []struct {
								DIAG_DATE string `xml:",omitempty" json:",omitempty"`
								DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
								DIAG_CODE string `xml:",omitempty" json:",omitempty"`
								DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
								REC_RSLT  string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							B_PROT []struct {
								PROT   string `xml:",omitempty" json:",omitempty"`
								D_PROT string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							ONK_USL []struct {
								USL_TIP   string `xml:",omitempty" json:",omitempty"`
								HIR_TIP   string `xml:",omitempty" json:",omitempty"`
								LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
								LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
								LEK_PR    []struct {
									REGNUM   string `xml:",omitempty" json:",omitempty"`
									CODE_SH  string `xml:",omitempty" json:",omitempty"`
									DATE_INJ []string
								} `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							PPTR     string `xml:",omitempty" json:",omitempty"`
							LUCH_TIP string `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.ONK_SL = []struct {
							DS1_T  string `xml:",omitempty" json:",omitempty"`
							STAD   string `xml:",omitempty" json:",omitempty"`
							ONK_T  string `xml:",omitempty" json:",omitempty"`
							ONK_N  string `xml:",omitempty" json:",omitempty"`
							ONK_M  string `xml:",omitempty" json:",omitempty"`
							MTSTZ  string `xml:",omitempty" json:",omitempty"`
							SOD    string `xml:",omitempty" json:",omitempty"`
							K_FR   string `xml:",omitempty" json:",omitempty"`
							WEI    string `xml:",omitempty" json:",omitempty"`
							HEI    string `xml:",omitempty" json:",omitempty"`
							BSA    string `xml:",omitempty" json:",omitempty"`
							B_DIAG []struct {
								DIAG_DATE string `xml:",omitempty" json:",omitempty"`
								DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
								DIAG_CODE string `xml:",omitempty" json:",omitempty"`
								DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
								REC_RSLT  string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							B_PROT []struct {
								PROT   string `xml:",omitempty" json:",omitempty"`
								D_PROT string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							ONK_USL []struct {
								USL_TIP   string `xml:",omitempty" json:",omitempty"`
								HIR_TIP   string `xml:",omitempty" json:",omitempty"`
								LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
								LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
								LEK_PR    []struct {
									REGNUM   string `xml:",omitempty" json:",omitempty"`
									CODE_SH  string `xml:",omitempty" json:",omitempty"`
									DATE_INJ []string
								} `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
							PPTR     string `xml:",omitempty" json:",omitempty"`
							LUCH_TIP string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.ONK_SL = (out.ONK_SL)[:0]
				}
				for !in.IsDelim(']') {
					var v26 struct {
						DS1_T  string `xml:",omitempty" json:",omitempty"`
						STAD   string `xml:",omitempty" json:",omitempty"`
						ONK_T  string `xml:",omitempty" json:",omitempty"`
						ONK_N  string `xml:",omitempty" json:",omitempty"`
						ONK_M  string `xml:",omitempty" json:",omitempty"`
						MTSTZ  string `xml:",omitempty" json:",omitempty"`
						SOD    string `xml:",omitempty" json:",omitempty"`
						K_FR   string `xml:",omitempty" json:",omitempty"`
						WEI    string `xml:",omitempty" json:",omitempty"`
						HEI    string `xml:",omitempty" json:",omitempty"`
						BSA    string `xml:",omitempty" json:",omitempty"`
						B_DIAG []struct {
							DIAG_DATE string `xml:",omitempty" json:",omitempty"`
							DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
							DIAG_CODE string `xml:",omitempty" json:",omitempty"`
							DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
							REC_RSLT  string `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						B_PROT []struct {
							PROT   string `xml:",omitempty" json:",omitempty"`
							D_PROT string `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						ONK_USL []struct {
							USL_TIP   string `xml:",omitempty" json:",omitempty"`
							HIR_TIP   string `xml:",omitempty" json:",omitempty"`
							LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
							LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
							LEK_PR    []struct {
								REGNUM   string `xml:",omitempty" json:",omitempty"`
								CODE_SH  string `xml:",omitempty" json:",omitempty"`
								DATE_INJ []string
							} `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
						PPTR     string `xml:",omitempty" json:",omitempty"`
						LUCH_TIP string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode8(in, &v26)
					out.ONK_SL = append(out.ONK_SL, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "KSG_KPG":
			if in.IsNull() {
				in.Skip()
				out.KSG_KPG = nil
			} else {
				in.Delim('[')
				if out.KSG_KPG == nil {
					if !in.IsDelim(']') {
						out.KSG_KPG = make([]struct {
							N_KSG   string `xml:",omitempty" json:",omitempty"`
							VER_KSG string `xml:",omitempty" json:",omitempty"`
							KSG_PG  string `xml:",omitempty" json:",omitempty"`
							N_KPG   string `xml:",omitempty" json:",omitempty"`
							KOEF_Z  string `xml:",omitempty" json:",omitempty"`
							KOEF_UP string `xml:",omitempty" json:",omitempty"`
							BZTSZ   string `xml:",omitempty" json:",omitempty"`
							KOEF_D  string `xml:",omitempty" json:",omitempty"`
							KOEF_U  string `xml:",omitempty" json:",omitempty"`
							CRIT    []string
							SL_K    string `xml:",omitempty" json:",omitempty"`
							IT_SL   string `xml:",omitempty" json:",omitempty"`
							SL_KOEF []struct {
								IDSL string `xml:",omitempty" json:",omitempty"`
								Z_SL string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.KSG_KPG = []struct {
							N_KSG   string `xml:",omitempty" json:",omitempty"`
							VER_KSG string `xml:",omitempty" json:",omitempty"`
							KSG_PG  string `xml:",omitempty" json:",omitempty"`
							N_KPG   string `xml:",omitempty" json:",omitempty"`
							KOEF_Z  string `xml:",omitempty" json:",omitempty"`
							KOEF_UP string `xml:",omitempty" json:",omitempty"`
							BZTSZ   string `xml:",omitempty" json:",omitempty"`
							KOEF_D  string `xml:",omitempty" json:",omitempty"`
							KOEF_U  string `xml:",omitempty" json:",omitempty"`
							CRIT    []string
							SL_K    string `xml:",omitempty" json:",omitempty"`
							IT_SL   string `xml:",omitempty" json:",omitempty"`
							SL_KOEF []struct {
								IDSL string `xml:",omitempty" json:",omitempty"`
								Z_SL string `xml:",omitempty" json:",omitempty"`
							} `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.KSG_KPG = (out.KSG_KPG)[:0]
				}
				for !in.IsDelim(']') {
					var v27 struct {
						N_KSG   string `xml:",omitempty" json:",omitempty"`
						VER_KSG string `xml:",omitempty" json:",omitempty"`
						KSG_PG  string `xml:",omitempty" json:",omitempty"`
						N_KPG   string `xml:",omitempty" json:",omitempty"`
						KOEF_Z  string `xml:",omitempty" json:",omitempty"`
						KOEF_UP string `xml:",omitempty" json:",omitempty"`
						BZTSZ   string `xml:",omitempty" json:",omitempty"`
						KOEF_D  string `xml:",omitempty" json:",omitempty"`
						KOEF_U  string `xml:",omitempty" json:",omitempty"`
						CRIT    []string
						SL_K    string `xml:",omitempty" json:",omitempty"`
						IT_SL   string `xml:",omitempty" json:",omitempty"`
						SL_KOEF []struct {
							IDSL string `xml:",omitempty" json:",omitempty"`
							Z_SL string `xml:",omitempty" json:",omitempty"`
						} `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode9(in, &v27)
					out.KSG_KPG = append(out.KSG_KPG, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "REAB":
			out.REAB = string(in.String())
		case "PRVS":
			out.PRVS = string(in.String())
		case "VERS_SPEC":
			out.VERS_SPEC = string(in.String())
		case "IDDOKT":
			out.IDDOKT = string(in.String())
		case "ED_COL":
			out.ED_COL = string(in.String())
		case "TARIF":
			out.TARIF = float32(in.Float32())
		case "SUM_M":
			out.SUM_M = float32(in.Float32())
		case "USL":
			if in.IsNull() {
				in.Skip()
				out.USL = nil
			} else {
				in.Delim('[')
				if out.USL == nil {
					if !in.IsDelim(']') {
						out.USL = make([]struct {
							IDSERV   string  `xml:",omitempty" json:",omitempty"`
							LPU      string  `xml:",omitempty" json:",omitempty"`
							LPU_1    string  `xml:",omitempty" json:",omitempty"`
							PODR     string  `xml:",omitempty" json:",omitempty"`
							PROFIL   string  `xml:",omitempty" json:",omitempty"`
							VID_VME  string  `xml:",omitempty" json:",omitempty"`
							DET      string  `xml:",omitempty" json:",omitempty"`
							DATE_IN  string  `xml:",omitempty" json:",omitempty"`
							DATE_OUT string  `xml:",omitempty" json:",omitempty"`
							DS       string  `xml:",omitempty" json:",omitempty"`
							P_OTK    string  `xml:",omitempty" json:",omitempty"`
							CODE_USL string  `xml:",omitempty" json:",omitempty"`
							KOL_USL  string  `xml:",omitempty" json:",omitempty"`
							TARIF    float32 `xml:",omitempty" json:",omitempty"`
							SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
							PRVS     string  `xml:",omitempty" json:",omitempty"`
							CODE_MD  string  `xml:",omitempty" json:",omitempty"`
							NPL      string  `xml:",omitempty" json:",omitempty"`
							COMENTU  string  `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.USL = []struct {
							IDSERV   string  `xml:",omitempty" json:",omitempty"`
							LPU      string  `xml:",omitempty" json:",omitempty"`
							LPU_1    string  `xml:",omitempty" json:",omitempty"`
							PODR     string  `xml:",omitempty" json:",omitempty"`
							PROFIL   string  `xml:",omitempty" json:",omitempty"`
							VID_VME  string  `xml:",omitempty" json:",omitempty"`
							DET      string  `xml:",omitempty" json:",omitempty"`
							DATE_IN  string  `xml:",omitempty" json:",omitempty"`
							DATE_OUT string  `xml:",omitempty" json:",omitempty"`
							DS       string  `xml:",omitempty" json:",omitempty"`
							P_OTK    string  `xml:",omitempty" json:",omitempty"`
							CODE_USL string  `xml:",omitempty" json:",omitempty"`
							KOL_USL  string  `xml:",omitempty" json:",omitempty"`
							TARIF    float32 `xml:",omitempty" json:",omitempty"`
							SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
							PRVS     string  `xml:",omitempty" json:",omitempty"`
							CODE_MD  string  `xml:",omitempty" json:",omitempty"`
							NPL      string  `xml:",omitempty" json:",omitempty"`
							COMENTU  string  `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.USL = (out.USL)[:0]
				}
				for !in.IsDelim(']') {
					var v28 struct {
						IDSERV   string  `xml:",omitempty" json:",omitempty"`
						LPU      string  `xml:",omitempty" json:",omitempty"`
						LPU_1    string  `xml:",omitempty" json:",omitempty"`
						PODR     string  `xml:",omitempty" json:",omitempty"`
						PROFIL   string  `xml:",omitempty" json:",omitempty"`
						VID_VME  string  `xml:",omitempty" json:",omitempty"`
						DET      string  `xml:",omitempty" json:",omitempty"`
						DATE_IN  string  `xml:",omitempty" json:",omitempty"`
						DATE_OUT string  `xml:",omitempty" json:",omitempty"`
						DS       string  `xml:",omitempty" json:",omitempty"`
						P_OTK    string  `xml:",omitempty" json:",omitempty"`
						CODE_USL string  `xml:",omitempty" json:",omitempty"`
						KOL_USL  string  `xml:",omitempty" json:",omitempty"`
						TARIF    float32 `xml:",omitempty" json:",omitempty"`
						SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
						PRVS     string  `xml:",omitempty" json:",omitempty"`
						CODE_MD  string  `xml:",omitempty" json:",omitempty"`
						NPL      string  `xml:",omitempty" json:",omitempty"`
						COMENTU  string  `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode10(in, &v28)
					out.USL = append(out.USL, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "COMENTSL":
			out.COMENTSL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode2(out *jwriter.Writer, in struct {
	SL_ID     string
	VOD_HMP   string   `xml:",omitempty" json:",omitempty"`
	METOD_HMP string   `xml:",omitempty" json:",omitempty"`
	LPU_1     string   `xml:",omitempty" json:",omitempty"`
	PODR      string   `xml:",omitempty" json:",omitempty"`
	PROFIL    string   `xml:",omitempty" json:",omitempty"`
	PROFIL_K  string   `xml:",omitempty" json:",omitempty"`
	DET       string   `xml:",omitempty" json:",omitempty"`
	TAL_D     string   `xml:",omitempty" json:",omitempty"`
	TAL_NUM   string   `xml:",omitempty" json:",omitempty"`
	TAL_P     string   `xml:",omitempty" json:",omitempty"`
	P_CEL     string   `xml:",omitempty" json:",omitempty"`
	NHISTORY  string   `xml:",omitempty" json:",omitempty"`
	P_PER     string   `xml:",omitempty" json:",omitempty"`
	DATE_1    string   `xml:",omitempty" json:",omitempty"`
	DATE_2    string   `xml:",omitempty" json:",omitempty"`
	KD        string   `xml:",omitempty" json:",omitempty"`
	DS0       string   `xml:",omitempty" json:",omitempty"`
	DS1       string   `xml:",omitempty" json:",omitempty"`
	DS2       []string `xml:",omitempty" json:",omitempty"`
	DS3       []string `xml:",omitempty" json:",omitempty"`
	C_ZAB     string   `xml:",omitempty" json:",omitempty"`
	DS1_PR    string   `xml:",omitempty" json:",omitempty"`
	DS_ONK    string   `xml:",omitempty" json:",omitempty"`
	PR_D_N    string   `xml:",omitempty" json:",omitempty"`
	DN        string   `xml:",omitempty" json:",omitempty"`
	CODE_MES1 []string `xml:",omitempty" json:",omitempty"`
	CODE_MES2 string   `xml:",omitempty" json:",omitempty"`
	DS2_N     []struct {
		DS2      string `xml:",omitempty" json:",omitempty"`
		DS2_PR   string `xml:",omitempty" json:",omitempty"`
		PR_DS2_N string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	NAZ []struct {
		NAZ_N     string `xml:",omitempty" json:",omitempty"`
		NAZ_R     string `xml:",omitempty" json:",omitempty"`
		NAZ_SP    string `xml:",omitempty" json:",omitempty"`
		NAZ_V     string `xml:",omitempty" json:",omitempty"`
		NAZ_USL   string `xml:",omitempty" json:",omitempty"`
		NAPR_DATE string `xml:",omitempty" json:",omitempty"`
		NAPR_MO   string `xml:",omitempty" json:",omitempty"`
		NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
		NAZ_PK    string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	NAPR []struct {
		NAPR_DATE string `xml:",omitempty" json:",omitempty"`
		NAPR_MO   string `xml:",omitempty" json:",omitempty"`
		NAPR_V    string `xml:",omitempty" json:",omitempty"`
		MET_ISSL  string `xml:",omitempty" json:",omitempty"`
		NAPR_USL  string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	CONS []struct {
		PR_CONS string `xml:",omitempty" json:",omitempty"`
		DT_CONS string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	ONK_SL []struct {
		DS1_T  string `xml:",omitempty" json:",omitempty"`
		STAD   string `xml:",omitempty" json:",omitempty"`
		ONK_T  string `xml:",omitempty" json:",omitempty"`
		ONK_N  string `xml:",omitempty" json:",omitempty"`
		ONK_M  string `xml:",omitempty" json:",omitempty"`
		MTSTZ  string `xml:",omitempty" json:",omitempty"`
		SOD    string `xml:",omitempty" json:",omitempty"`
		K_FR   string `xml:",omitempty" json:",omitempty"`
		WEI    string `xml:",omitempty" json:",omitempty"`
		HEI    string `xml:",omitempty" json:",omitempty"`
		BSA    string `xml:",omitempty" json:",omitempty"`
		B_DIAG []struct {
			DIAG_DATE string `xml:",omitempty" json:",omitempty"`
			DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
			DIAG_CODE string `xml:",omitempty" json:",omitempty"`
			DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
			REC_RSLT  string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		B_PROT []struct {
			PROT   string `xml:",omitempty" json:",omitempty"`
			D_PROT string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		ONK_USL []struct {
			USL_TIP   string `xml:",omitempty" json:",omitempty"`
			HIR_TIP   string `xml:",omitempty" json:",omitempty"`
			LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
			LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
			LEK_PR    []struct {
				REGNUM   string `xml:",omitempty" json:",omitempty"`
				CODE_SH  string `xml:",omitempty" json:",omitempty"`
				DATE_INJ []string
			} `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
		PPTR     string `xml:",omitempty" json:",omitempty"`
		LUCH_TIP string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	KSG_KPG []struct {
		N_KSG   string `xml:",omitempty" json:",omitempty"`
		VER_KSG string `xml:",omitempty" json:",omitempty"`
		KSG_PG  string `xml:",omitempty" json:",omitempty"`
		N_KPG   string `xml:",omitempty" json:",omitempty"`
		KOEF_Z  string `xml:",omitempty" json:",omitempty"`
		KOEF_UP string `xml:",omitempty" json:",omitempty"`
		BZTSZ   string `xml:",omitempty" json:",omitempty"`
		KOEF_D  string `xml:",omitempty" json:",omitempty"`
		KOEF_U  string `xml:",omitempty" json:",omitempty"`
		CRIT    []string
		SL_K    string `xml:",omitempty" json:",omitempty"`
		IT_SL   string `xml:",omitempty" json:",omitempty"`
		SL_KOEF []struct {
			IDSL string `xml:",omitempty" json:",omitempty"`
			Z_SL string `xml:",omitempty" json:",omitempty"`
		} `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	REAB      string  `xml:",omitempty" json:",omitempty"`
	PRVS      string  `xml:",omitempty" json:",omitempty"`
	VERS_SPEC string  `xml:",omitempty" json:",omitempty"`
	IDDOKT    string  `xml:",omitempty" json:",omitempty"`
	ED_COL    string  `xml:",omitempty" json:",omitempty"`
	TARIF     float32 `xml:",omitempty" json:",omitempty"`
	SUM_M     float32
	USL       []struct {
		IDSERV   string  `xml:",omitempty" json:",omitempty"`
		LPU      string  `xml:",omitempty" json:",omitempty"`
		LPU_1    string  `xml:",omitempty" json:",omitempty"`
		PODR     string  `xml:",omitempty" json:",omitempty"`
		PROFIL   string  `xml:",omitempty" json:",omitempty"`
		VID_VME  string  `xml:",omitempty" json:",omitempty"`
		DET      string  `xml:",omitempty" json:",omitempty"`
		DATE_IN  string  `xml:",omitempty" json:",omitempty"`
		DATE_OUT string  `xml:",omitempty" json:",omitempty"`
		DS       string  `xml:",omitempty" json:",omitempty"`
		P_OTK    string  `xml:",omitempty" json:",omitempty"`
		CODE_USL string  `xml:",omitempty" json:",omitempty"`
		KOL_USL  string  `xml:",omitempty" json:",omitempty"`
		TARIF    float32 `xml:",omitempty" json:",omitempty"`
		SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
		PRVS     string  `xml:",omitempty" json:",omitempty"`
		CODE_MD  string  `xml:",omitempty" json:",omitempty"`
		NPL      string  `xml:",omitempty" json:",omitempty"`
		COMENTU  string  `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	COMENTSL string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SL_ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.SL_ID))
	}
	if in.VOD_HMP != "" {
		const prefix string = ",\"VOD_HMP\":"
		out.RawString(prefix)
		out.String(string(in.VOD_HMP))
	}
	if in.METOD_HMP != "" {
		const prefix string = ",\"METOD_HMP\":"
		out.RawString(prefix)
		out.String(string(in.METOD_HMP))
	}
	if in.LPU_1 != "" {
		const prefix string = ",\"LPU_1\":"
		out.RawString(prefix)
		out.String(string(in.LPU_1))
	}
	if in.PODR != "" {
		const prefix string = ",\"PODR\":"
		out.RawString(prefix)
		out.String(string(in.PODR))
	}
	if in.PROFIL != "" {
		const prefix string = ",\"PROFIL\":"
		out.RawString(prefix)
		out.String(string(in.PROFIL))
	}
	if in.PROFIL_K != "" {
		const prefix string = ",\"PROFIL_K\":"
		out.RawString(prefix)
		out.String(string(in.PROFIL_K))
	}
	if in.DET != "" {
		const prefix string = ",\"DET\":"
		out.RawString(prefix)
		out.String(string(in.DET))
	}
	if in.TAL_D != "" {
		const prefix string = ",\"TAL_D\":"
		out.RawString(prefix)
		out.String(string(in.TAL_D))
	}
	if in.TAL_NUM != "" {
		const prefix string = ",\"TAL_NUM\":"
		out.RawString(prefix)
		out.String(string(in.TAL_NUM))
	}
	if in.TAL_P != "" {
		const prefix string = ",\"TAL_P\":"
		out.RawString(prefix)
		out.String(string(in.TAL_P))
	}
	if in.P_CEL != "" {
		const prefix string = ",\"P_CEL\":"
		out.RawString(prefix)
		out.String(string(in.P_CEL))
	}
	if in.NHISTORY != "" {
		const prefix string = ",\"NHISTORY\":"
		out.RawString(prefix)
		out.String(string(in.NHISTORY))
	}
	if in.P_PER != "" {
		const prefix string = ",\"P_PER\":"
		out.RawString(prefix)
		out.String(string(in.P_PER))
	}
	if in.DATE_1 != "" {
		const prefix string = ",\"DATE_1\":"
		out.RawString(prefix)
		out.String(string(in.DATE_1))
	}
	if in.DATE_2 != "" {
		const prefix string = ",\"DATE_2\":"
		out.RawString(prefix)
		out.String(string(in.DATE_2))
	}
	if in.KD != "" {
		const prefix string = ",\"KD\":"
		out.RawString(prefix)
		out.String(string(in.KD))
	}
	if in.DS0 != "" {
		const prefix string = ",\"DS0\":"
		out.RawString(prefix)
		out.String(string(in.DS0))
	}
	if in.DS1 != "" {
		const prefix string = ",\"DS1\":"
		out.RawString(prefix)
		out.String(string(in.DS1))
	}
	if len(in.DS2) != 0 {
		const prefix string = ",\"DS2\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v29, v30 := range in.DS2 {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	if len(in.DS3) != 0 {
		const prefix string = ",\"DS3\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v31, v32 := range in.DS3 {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if in.C_ZAB != "" {
		const prefix string = ",\"C_ZAB\":"
		out.RawString(prefix)
		out.String(string(in.C_ZAB))
	}
	if in.DS1_PR != "" {
		const prefix string = ",\"DS1_PR\":"
		out.RawString(prefix)
		out.String(string(in.DS1_PR))
	}
	if in.DS_ONK != "" {
		const prefix string = ",\"DS_ONK\":"
		out.RawString(prefix)
		out.String(string(in.DS_ONK))
	}
	if in.PR_D_N != "" {
		const prefix string = ",\"PR_D_N\":"
		out.RawString(prefix)
		out.String(string(in.PR_D_N))
	}
	if in.DN != "" {
		const prefix string = ",\"DN\":"
		out.RawString(prefix)
		out.String(string(in.DN))
	}
	if len(in.CODE_MES1) != 0 {
		const prefix string = ",\"CODE_MES1\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v33, v34 := range in.CODE_MES1 {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if in.CODE_MES2 != "" {
		const prefix string = ",\"CODE_MES2\":"
		out.RawString(prefix)
		out.String(string(in.CODE_MES2))
	}
	if len(in.DS2_N) != 0 {
		const prefix string = ",\"DS2_N\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v35, v36 := range in.DS2_N {
				if v35 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode4(out, v36)
			}
			out.RawByte(']')
		}
	}
	if len(in.NAZ) != 0 {
		const prefix string = ",\"NAZ\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v37, v38 := range in.NAZ {
				if v37 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode5(out, v38)
			}
			out.RawByte(']')
		}
	}
	if len(in.NAPR) != 0 {
		const prefix string = ",\"NAPR\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v39, v40 := range in.NAPR {
				if v39 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode6(out, v40)
			}
			out.RawByte(']')
		}
	}
	if len(in.CONS) != 0 {
		const prefix string = ",\"CONS\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v41, v42 := range in.CONS {
				if v41 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode7(out, v42)
			}
			out.RawByte(']')
		}
	}
	if len(in.ONK_SL) != 0 {
		const prefix string = ",\"ONK_SL\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v43, v44 := range in.ONK_SL {
				if v43 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode8(out, v44)
			}
			out.RawByte(']')
		}
	}
	if len(in.KSG_KPG) != 0 {
		const prefix string = ",\"KSG_KPG\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v45, v46 := range in.KSG_KPG {
				if v45 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode9(out, v46)
			}
			out.RawByte(']')
		}
	}
	if in.REAB != "" {
		const prefix string = ",\"REAB\":"
		out.RawString(prefix)
		out.String(string(in.REAB))
	}
	if in.PRVS != "" {
		const prefix string = ",\"PRVS\":"
		out.RawString(prefix)
		out.String(string(in.PRVS))
	}
	if in.VERS_SPEC != "" {
		const prefix string = ",\"VERS_SPEC\":"
		out.RawString(prefix)
		out.String(string(in.VERS_SPEC))
	}
	if in.IDDOKT != "" {
		const prefix string = ",\"IDDOKT\":"
		out.RawString(prefix)
		out.String(string(in.IDDOKT))
	}
	if in.ED_COL != "" {
		const prefix string = ",\"ED_COL\":"
		out.RawString(prefix)
		out.String(string(in.ED_COL))
	}
	if in.TARIF != 0 {
		const prefix string = ",\"TARIF\":"
		out.RawString(prefix)
		out.Float32(float32(in.TARIF))
	}
	{
		const prefix string = ",\"SUM_M\":"
		out.RawString(prefix)
		out.Float32(float32(in.SUM_M))
	}
	if len(in.USL) != 0 {
		const prefix string = ",\"USL\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v47, v48 := range in.USL {
				if v47 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode10(out, v48)
			}
			out.RawByte(']')
		}
	}
	if in.COMENTSL != "" {
		const prefix string = ",\"COMENTSL\":"
		out.RawString(prefix)
		out.String(string(in.COMENTSL))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode10(in *jlexer.Lexer, out *struct {
	IDSERV   string  `xml:",omitempty" json:",omitempty"`
	LPU      string  `xml:",omitempty" json:",omitempty"`
	LPU_1    string  `xml:",omitempty" json:",omitempty"`
	PODR     string  `xml:",omitempty" json:",omitempty"`
	PROFIL   string  `xml:",omitempty" json:",omitempty"`
	VID_VME  string  `xml:",omitempty" json:",omitempty"`
	DET      string  `xml:",omitempty" json:",omitempty"`
	DATE_IN  string  `xml:",omitempty" json:",omitempty"`
	DATE_OUT string  `xml:",omitempty" json:",omitempty"`
	DS       string  `xml:",omitempty" json:",omitempty"`
	P_OTK    string  `xml:",omitempty" json:",omitempty"`
	CODE_USL string  `xml:",omitempty" json:",omitempty"`
	KOL_USL  string  `xml:",omitempty" json:",omitempty"`
	TARIF    float32 `xml:",omitempty" json:",omitempty"`
	SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
	PRVS     string  `xml:",omitempty" json:",omitempty"`
	CODE_MD  string  `xml:",omitempty" json:",omitempty"`
	NPL      string  `xml:",omitempty" json:",omitempty"`
	COMENTU  string  `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IDSERV":
			out.IDSERV = string(in.String())
		case "LPU":
			out.LPU = string(in.String())
		case "LPU_1":
			out.LPU_1 = string(in.String())
		case "PODR":
			out.PODR = string(in.String())
		case "PROFIL":
			out.PROFIL = string(in.String())
		case "VID_VME":
			out.VID_VME = string(in.String())
		case "DET":
			out.DET = string(in.String())
		case "DATE_IN":
			out.DATE_IN = string(in.String())
		case "DATE_OUT":
			out.DATE_OUT = string(in.String())
		case "DS":
			out.DS = string(in.String())
		case "P_OTK":
			out.P_OTK = string(in.String())
		case "CODE_USL":
			out.CODE_USL = string(in.String())
		case "KOL_USL":
			out.KOL_USL = string(in.String())
		case "TARIF":
			out.TARIF = float32(in.Float32())
		case "SUMV_USL":
			out.SUMV_USL = float32(in.Float32())
		case "PRVS":
			out.PRVS = string(in.String())
		case "CODE_MD":
			out.CODE_MD = string(in.String())
		case "NPL":
			out.NPL = string(in.String())
		case "COMENTU":
			out.COMENTU = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode10(out *jwriter.Writer, in struct {
	IDSERV   string  `xml:",omitempty" json:",omitempty"`
	LPU      string  `xml:",omitempty" json:",omitempty"`
	LPU_1    string  `xml:",omitempty" json:",omitempty"`
	PODR     string  `xml:",omitempty" json:",omitempty"`
	PROFIL   string  `xml:",omitempty" json:",omitempty"`
	VID_VME  string  `xml:",omitempty" json:",omitempty"`
	DET      string  `xml:",omitempty" json:",omitempty"`
	DATE_IN  string  `xml:",omitempty" json:",omitempty"`
	DATE_OUT string  `xml:",omitempty" json:",omitempty"`
	DS       string  `xml:",omitempty" json:",omitempty"`
	P_OTK    string  `xml:",omitempty" json:",omitempty"`
	CODE_USL string  `xml:",omitempty" json:",omitempty"`
	KOL_USL  string  `xml:",omitempty" json:",omitempty"`
	TARIF    float32 `xml:",omitempty" json:",omitempty"`
	SUMV_USL float32 `xml:",omitempty" json:",omitempty"`
	PRVS     string  `xml:",omitempty" json:",omitempty"`
	CODE_MD  string  `xml:",omitempty" json:",omitempty"`
	NPL      string  `xml:",omitempty" json:",omitempty"`
	COMENTU  string  `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IDSERV != "" {
		const prefix string = ",\"IDSERV\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.IDSERV))
	}
	if in.LPU != "" {
		const prefix string = ",\"LPU\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LPU))
	}
	if in.LPU_1 != "" {
		const prefix string = ",\"LPU_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LPU_1))
	}
	if in.PODR != "" {
		const prefix string = ",\"PODR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PODR))
	}
	if in.PROFIL != "" {
		const prefix string = ",\"PROFIL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PROFIL))
	}
	if in.VID_VME != "" {
		const prefix string = ",\"VID_VME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VID_VME))
	}
	if in.DET != "" {
		const prefix string = ",\"DET\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DET))
	}
	if in.DATE_IN != "" {
		const prefix string = ",\"DATE_IN\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DATE_IN))
	}
	if in.DATE_OUT != "" {
		const prefix string = ",\"DATE_OUT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DATE_OUT))
	}
	if in.DS != "" {
		const prefix string = ",\"DS\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DS))
	}
	if in.P_OTK != "" {
		const prefix string = ",\"P_OTK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.P_OTK))
	}
	if in.CODE_USL != "" {
		const prefix string = ",\"CODE_USL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CODE_USL))
	}
	if in.KOL_USL != "" {
		const prefix string = ",\"KOL_USL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KOL_USL))
	}
	if in.TARIF != 0 {
		const prefix string = ",\"TARIF\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.TARIF))
	}
	if in.SUMV_USL != 0 {
		const prefix string = ",\"SUMV_USL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.SUMV_USL))
	}
	if in.PRVS != "" {
		const prefix string = ",\"PRVS\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PRVS))
	}
	if in.CODE_MD != "" {
		const prefix string = ",\"CODE_MD\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CODE_MD))
	}
	if in.NPL != "" {
		const prefix string = ",\"NPL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NPL))
	}
	if in.COMENTU != "" {
		const prefix string = ",\"COMENTU\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.COMENTU))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode9(in *jlexer.Lexer, out *struct {
	N_KSG   string `xml:",omitempty" json:",omitempty"`
	VER_KSG string `xml:",omitempty" json:",omitempty"`
	KSG_PG  string `xml:",omitempty" json:",omitempty"`
	N_KPG   string `xml:",omitempty" json:",omitempty"`
	KOEF_Z  string `xml:",omitempty" json:",omitempty"`
	KOEF_UP string `xml:",omitempty" json:",omitempty"`
	BZTSZ   string `xml:",omitempty" json:",omitempty"`
	KOEF_D  string `xml:",omitempty" json:",omitempty"`
	KOEF_U  string `xml:",omitempty" json:",omitempty"`
	CRIT    []string
	SL_K    string `xml:",omitempty" json:",omitempty"`
	IT_SL   string `xml:",omitempty" json:",omitempty"`
	SL_KOEF []struct {
		IDSL string `xml:",omitempty" json:",omitempty"`
		Z_SL string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "N_KSG":
			out.N_KSG = string(in.String())
		case "VER_KSG":
			out.VER_KSG = string(in.String())
		case "KSG_PG":
			out.KSG_PG = string(in.String())
		case "N_KPG":
			out.N_KPG = string(in.String())
		case "KOEF_Z":
			out.KOEF_Z = string(in.String())
		case "KOEF_UP":
			out.KOEF_UP = string(in.String())
		case "BZTSZ":
			out.BZTSZ = string(in.String())
		case "KOEF_D":
			out.KOEF_D = string(in.String())
		case "KOEF_U":
			out.KOEF_U = string(in.String())
		case "CRIT":
			if in.IsNull() {
				in.Skip()
				out.CRIT = nil
			} else {
				in.Delim('[')
				if out.CRIT == nil {
					if !in.IsDelim(']') {
						out.CRIT = make([]string, 0, 4)
					} else {
						out.CRIT = []string{}
					}
				} else {
					out.CRIT = (out.CRIT)[:0]
				}
				for !in.IsDelim(']') {
					var v49 string
					v49 = string(in.String())
					out.CRIT = append(out.CRIT, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SL_K":
			out.SL_K = string(in.String())
		case "IT_SL":
			out.IT_SL = string(in.String())
		case "SL_KOEF":
			if in.IsNull() {
				in.Skip()
				out.SL_KOEF = nil
			} else {
				in.Delim('[')
				if out.SL_KOEF == nil {
					if !in.IsDelim(']') {
						out.SL_KOEF = make([]struct {
							IDSL string `xml:",omitempty" json:",omitempty"`
							Z_SL string `xml:",omitempty" json:",omitempty"`
						}, 0, 2)
					} else {
						out.SL_KOEF = []struct {
							IDSL string `xml:",omitempty" json:",omitempty"`
							Z_SL string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.SL_KOEF = (out.SL_KOEF)[:0]
				}
				for !in.IsDelim(']') {
					var v50 struct {
						IDSL string `xml:",omitempty" json:",omitempty"`
						Z_SL string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode11(in, &v50)
					out.SL_KOEF = append(out.SL_KOEF, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode9(out *jwriter.Writer, in struct {
	N_KSG   string `xml:",omitempty" json:",omitempty"`
	VER_KSG string `xml:",omitempty" json:",omitempty"`
	KSG_PG  string `xml:",omitempty" json:",omitempty"`
	N_KPG   string `xml:",omitempty" json:",omitempty"`
	KOEF_Z  string `xml:",omitempty" json:",omitempty"`
	KOEF_UP string `xml:",omitempty" json:",omitempty"`
	BZTSZ   string `xml:",omitempty" json:",omitempty"`
	KOEF_D  string `xml:",omitempty" json:",omitempty"`
	KOEF_U  string `xml:",omitempty" json:",omitempty"`
	CRIT    []string
	SL_K    string `xml:",omitempty" json:",omitempty"`
	IT_SL   string `xml:",omitempty" json:",omitempty"`
	SL_KOEF []struct {
		IDSL string `xml:",omitempty" json:",omitempty"`
		Z_SL string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.N_KSG != "" {
		const prefix string = ",\"N_KSG\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.N_KSG))
	}
	if in.VER_KSG != "" {
		const prefix string = ",\"VER_KSG\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VER_KSG))
	}
	if in.KSG_PG != "" {
		const prefix string = ",\"KSG_PG\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KSG_PG))
	}
	if in.N_KPG != "" {
		const prefix string = ",\"N_KPG\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.N_KPG))
	}
	if in.KOEF_Z != "" {
		const prefix string = ",\"KOEF_Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KOEF_Z))
	}
	if in.KOEF_UP != "" {
		const prefix string = ",\"KOEF_UP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KOEF_UP))
	}
	if in.BZTSZ != "" {
		const prefix string = ",\"BZTSZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BZTSZ))
	}
	if in.KOEF_D != "" {
		const prefix string = ",\"KOEF_D\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KOEF_D))
	}
	if in.KOEF_U != "" {
		const prefix string = ",\"KOEF_U\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KOEF_U))
	}
	{
		const prefix string = ",\"CRIT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CRIT == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.CRIT {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.String(string(v52))
			}
			out.RawByte(']')
		}
	}
	if in.SL_K != "" {
		const prefix string = ",\"SL_K\":"
		out.RawString(prefix)
		out.String(string(in.SL_K))
	}
	if in.IT_SL != "" {
		const prefix string = ",\"IT_SL\":"
		out.RawString(prefix)
		out.String(string(in.IT_SL))
	}
	if len(in.SL_KOEF) != 0 {
		const prefix string = ",\"SL_KOEF\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v53, v54 := range in.SL_KOEF {
				if v53 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode11(out, v54)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode11(in *jlexer.Lexer, out *struct {
	IDSL string `xml:",omitempty" json:",omitempty"`
	Z_SL string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IDSL":
			out.IDSL = string(in.String())
		case "Z_SL":
			out.Z_SL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode11(out *jwriter.Writer, in struct {
	IDSL string `xml:",omitempty" json:",omitempty"`
	Z_SL string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IDSL != "" {
		const prefix string = ",\"IDSL\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.IDSL))
	}
	if in.Z_SL != "" {
		const prefix string = ",\"Z_SL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Z_SL))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode8(in *jlexer.Lexer, out *struct {
	DS1_T  string `xml:",omitempty" json:",omitempty"`
	STAD   string `xml:",omitempty" json:",omitempty"`
	ONK_T  string `xml:",omitempty" json:",omitempty"`
	ONK_N  string `xml:",omitempty" json:",omitempty"`
	ONK_M  string `xml:",omitempty" json:",omitempty"`
	MTSTZ  string `xml:",omitempty" json:",omitempty"`
	SOD    string `xml:",omitempty" json:",omitempty"`
	K_FR   string `xml:",omitempty" json:",omitempty"`
	WEI    string `xml:",omitempty" json:",omitempty"`
	HEI    string `xml:",omitempty" json:",omitempty"`
	BSA    string `xml:",omitempty" json:",omitempty"`
	B_DIAG []struct {
		DIAG_DATE string `xml:",omitempty" json:",omitempty"`
		DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
		DIAG_CODE string `xml:",omitempty" json:",omitempty"`
		DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
		REC_RSLT  string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	B_PROT []struct {
		PROT   string `xml:",omitempty" json:",omitempty"`
		D_PROT string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	ONK_USL []struct {
		USL_TIP   string `xml:",omitempty" json:",omitempty"`
		HIR_TIP   string `xml:",omitempty" json:",omitempty"`
		LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
		LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
		LEK_PR    []struct {
			REGNUM   string `xml:",omitempty" json:",omitempty"`
			CODE_SH  string `xml:",omitempty" json:",omitempty"`
			DATE_INJ []string
		} `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	PPTR     string `xml:",omitempty" json:",omitempty"`
	LUCH_TIP string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DS1_T":
			out.DS1_T = string(in.String())
		case "STAD":
			out.STAD = string(in.String())
		case "ONK_T":
			out.ONK_T = string(in.String())
		case "ONK_N":
			out.ONK_N = string(in.String())
		case "ONK_M":
			out.ONK_M = string(in.String())
		case "MTSTZ":
			out.MTSTZ = string(in.String())
		case "SOD":
			out.SOD = string(in.String())
		case "K_FR":
			out.K_FR = string(in.String())
		case "WEI":
			out.WEI = string(in.String())
		case "HEI":
			out.HEI = string(in.String())
		case "BSA":
			out.BSA = string(in.String())
		case "B_DIAG":
			if in.IsNull() {
				in.Skip()
				out.B_DIAG = nil
			} else {
				in.Delim('[')
				if out.B_DIAG == nil {
					if !in.IsDelim(']') {
						out.B_DIAG = make([]struct {
							DIAG_DATE string `xml:",omitempty" json:",omitempty"`
							DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
							DIAG_CODE string `xml:",omitempty" json:",omitempty"`
							DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
							REC_RSLT  string `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.B_DIAG = []struct {
							DIAG_DATE string `xml:",omitempty" json:",omitempty"`
							DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
							DIAG_CODE string `xml:",omitempty" json:",omitempty"`
							DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
							REC_RSLT  string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.B_DIAG = (out.B_DIAG)[:0]
				}
				for !in.IsDelim(']') {
					var v55 struct {
						DIAG_DATE string `xml:",omitempty" json:",omitempty"`
						DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
						DIAG_CODE string `xml:",omitempty" json:",omitempty"`
						DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
						REC_RSLT  string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode12(in, &v55)
					out.B_DIAG = append(out.B_DIAG, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "B_PROT":
			if in.IsNull() {
				in.Skip()
				out.B_PROT = nil
			} else {
				in.Delim('[')
				if out.B_PROT == nil {
					if !in.IsDelim(']') {
						out.B_PROT = make([]struct {
							PROT   string `xml:",omitempty" json:",omitempty"`
							D_PROT string `xml:",omitempty" json:",omitempty"`
						}, 0, 2)
					} else {
						out.B_PROT = []struct {
							PROT   string `xml:",omitempty" json:",omitempty"`
							D_PROT string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.B_PROT = (out.B_PROT)[:0]
				}
				for !in.IsDelim(']') {
					var v56 struct {
						PROT   string `xml:",omitempty" json:",omitempty"`
						D_PROT string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode13(in, &v56)
					out.B_PROT = append(out.B_PROT, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ONK_USL":
			if in.IsNull() {
				in.Skip()
				out.ONK_USL = nil
			} else {
				in.Delim('[')
				if out.ONK_USL == nil {
					if !in.IsDelim(']') {
						out.ONK_USL = make([]struct {
							USL_TIP   string `xml:",omitempty" json:",omitempty"`
							HIR_TIP   string `xml:",omitempty" json:",omitempty"`
							LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
							LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
							LEK_PR    []struct {
								REGNUM   string `xml:",omitempty" json:",omitempty"`
								CODE_SH  string `xml:",omitempty" json:",omitempty"`
								DATE_INJ []string
							} `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.ONK_USL = []struct {
							USL_TIP   string `xml:",omitempty" json:",omitempty"`
							HIR_TIP   string `xml:",omitempty" json:",omitempty"`
							LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
							LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
							LEK_PR    []struct {
								REGNUM   string `xml:",omitempty" json:",omitempty"`
								CODE_SH  string `xml:",omitempty" json:",omitempty"`
								DATE_INJ []string
							} `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.ONK_USL = (out.ONK_USL)[:0]
				}
				for !in.IsDelim(']') {
					var v57 struct {
						USL_TIP   string `xml:",omitempty" json:",omitempty"`
						HIR_TIP   string `xml:",omitempty" json:",omitempty"`
						LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
						LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
						LEK_PR    []struct {
							REGNUM   string `xml:",omitempty" json:",omitempty"`
							CODE_SH  string `xml:",omitempty" json:",omitempty"`
							DATE_INJ []string
						} `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode14(in, &v57)
					out.ONK_USL = append(out.ONK_USL, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PPTR":
			out.PPTR = string(in.String())
		case "LUCH_TIP":
			out.LUCH_TIP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode8(out *jwriter.Writer, in struct {
	DS1_T  string `xml:",omitempty" json:",omitempty"`
	STAD   string `xml:",omitempty" json:",omitempty"`
	ONK_T  string `xml:",omitempty" json:",omitempty"`
	ONK_N  string `xml:",omitempty" json:",omitempty"`
	ONK_M  string `xml:",omitempty" json:",omitempty"`
	MTSTZ  string `xml:",omitempty" json:",omitempty"`
	SOD    string `xml:",omitempty" json:",omitempty"`
	K_FR   string `xml:",omitempty" json:",omitempty"`
	WEI    string `xml:",omitempty" json:",omitempty"`
	HEI    string `xml:",omitempty" json:",omitempty"`
	BSA    string `xml:",omitempty" json:",omitempty"`
	B_DIAG []struct {
		DIAG_DATE string `xml:",omitempty" json:",omitempty"`
		DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
		DIAG_CODE string `xml:",omitempty" json:",omitempty"`
		DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
		REC_RSLT  string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	B_PROT []struct {
		PROT   string `xml:",omitempty" json:",omitempty"`
		D_PROT string `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	ONK_USL []struct {
		USL_TIP   string `xml:",omitempty" json:",omitempty"`
		HIR_TIP   string `xml:",omitempty" json:",omitempty"`
		LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
		LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
		LEK_PR    []struct {
			REGNUM   string `xml:",omitempty" json:",omitempty"`
			CODE_SH  string `xml:",omitempty" json:",omitempty"`
			DATE_INJ []string
		} `xml:",omitempty" json:",omitempty"`
	} `xml:",omitempty" json:",omitempty"`
	PPTR     string `xml:",omitempty" json:",omitempty"`
	LUCH_TIP string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DS1_T != "" {
		const prefix string = ",\"DS1_T\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DS1_T))
	}
	if in.STAD != "" {
		const prefix string = ",\"STAD\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.STAD))
	}
	if in.ONK_T != "" {
		const prefix string = ",\"ONK_T\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ONK_T))
	}
	if in.ONK_N != "" {
		const prefix string = ",\"ONK_N\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ONK_N))
	}
	if in.ONK_M != "" {
		const prefix string = ",\"ONK_M\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ONK_M))
	}
	if in.MTSTZ != "" {
		const prefix string = ",\"MTSTZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MTSTZ))
	}
	if in.SOD != "" {
		const prefix string = ",\"SOD\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SOD))
	}
	if in.K_FR != "" {
		const prefix string = ",\"K_FR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.K_FR))
	}
	if in.WEI != "" {
		const prefix string = ",\"WEI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WEI))
	}
	if in.HEI != "" {
		const prefix string = ",\"HEI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HEI))
	}
	if in.BSA != "" {
		const prefix string = ",\"BSA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BSA))
	}
	if len(in.B_DIAG) != 0 {
		const prefix string = ",\"B_DIAG\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v58, v59 := range in.B_DIAG {
				if v58 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode12(out, v59)
			}
			out.RawByte(']')
		}
	}
	if len(in.B_PROT) != 0 {
		const prefix string = ",\"B_PROT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v60, v61 := range in.B_PROT {
				if v60 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode13(out, v61)
			}
			out.RawByte(']')
		}
	}
	if len(in.ONK_USL) != 0 {
		const prefix string = ",\"ONK_USL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.ONK_USL {
				if v62 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode14(out, v63)
			}
			out.RawByte(']')
		}
	}
	if in.PPTR != "" {
		const prefix string = ",\"PPTR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PPTR))
	}
	if in.LUCH_TIP != "" {
		const prefix string = ",\"LUCH_TIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LUCH_TIP))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode14(in *jlexer.Lexer, out *struct {
	USL_TIP   string `xml:",omitempty" json:",omitempty"`
	HIR_TIP   string `xml:",omitempty" json:",omitempty"`
	LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
	LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
	LEK_PR    []struct {
		REGNUM   string `xml:",omitempty" json:",omitempty"`
		CODE_SH  string `xml:",omitempty" json:",omitempty"`
		DATE_INJ []string
	} `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "USL_TIP":
			out.USL_TIP = string(in.String())
		case "HIR_TIP":
			out.HIR_TIP = string(in.String())
		case "LEK_TIP_L":
			out.LEK_TIP_L = string(in.String())
		case "LEK_TIP_V":
			out.LEK_TIP_V = string(in.String())
		case "LEK_PR":
			if in.IsNull() {
				in.Skip()
				out.LEK_PR = nil
			} else {
				in.Delim('[')
				if out.LEK_PR == nil {
					if !in.IsDelim(']') {
						out.LEK_PR = make([]struct {
							REGNUM   string `xml:",omitempty" json:",omitempty"`
							CODE_SH  string `xml:",omitempty" json:",omitempty"`
							DATE_INJ []string
						}, 0, 1)
					} else {
						out.LEK_PR = []struct {
							REGNUM   string `xml:",omitempty" json:",omitempty"`
							CODE_SH  string `xml:",omitempty" json:",omitempty"`
							DATE_INJ []string
						}{}
					}
				} else {
					out.LEK_PR = (out.LEK_PR)[:0]
				}
				for !in.IsDelim(']') {
					var v64 struct {
						REGNUM   string `xml:",omitempty" json:",omitempty"`
						CODE_SH  string `xml:",omitempty" json:",omitempty"`
						DATE_INJ []string
					}
					easyjson8d03ee45Decode15(in, &v64)
					out.LEK_PR = append(out.LEK_PR, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode14(out *jwriter.Writer, in struct {
	USL_TIP   string `xml:",omitempty" json:",omitempty"`
	HIR_TIP   string `xml:",omitempty" json:",omitempty"`
	LEK_TIP_L string `xml:",omitempty" json:",omitempty"`
	LEK_TIP_V string `xml:",omitempty" json:",omitempty"`
	LEK_PR    []struct {
		REGNUM   string `xml:",omitempty" json:",omitempty"`
		CODE_SH  string `xml:",omitempty" json:",omitempty"`
		DATE_INJ []string
	} `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.USL_TIP != "" {
		const prefix string = ",\"USL_TIP\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.USL_TIP))
	}
	if in.HIR_TIP != "" {
		const prefix string = ",\"HIR_TIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HIR_TIP))
	}
	if in.LEK_TIP_L != "" {
		const prefix string = ",\"LEK_TIP_L\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LEK_TIP_L))
	}
	if in.LEK_TIP_V != "" {
		const prefix string = ",\"LEK_TIP_V\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LEK_TIP_V))
	}
	if len(in.LEK_PR) != 0 {
		const prefix string = ",\"LEK_PR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v65, v66 := range in.LEK_PR {
				if v65 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode15(out, v66)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode15(in *jlexer.Lexer, out *struct {
	REGNUM   string `xml:",omitempty" json:",omitempty"`
	CODE_SH  string `xml:",omitempty" json:",omitempty"`
	DATE_INJ []string
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "REGNUM":
			out.REGNUM = string(in.String())
		case "CODE_SH":
			out.CODE_SH = string(in.String())
		case "DATE_INJ":
			if in.IsNull() {
				in.Skip()
				out.DATE_INJ = nil
			} else {
				in.Delim('[')
				if out.DATE_INJ == nil {
					if !in.IsDelim(']') {
						out.DATE_INJ = make([]string, 0, 4)
					} else {
						out.DATE_INJ = []string{}
					}
				} else {
					out.DATE_INJ = (out.DATE_INJ)[:0]
				}
				for !in.IsDelim(']') {
					var v67 string
					v67 = string(in.String())
					out.DATE_INJ = append(out.DATE_INJ, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode15(out *jwriter.Writer, in struct {
	REGNUM   string `xml:",omitempty" json:",omitempty"`
	CODE_SH  string `xml:",omitempty" json:",omitempty"`
	DATE_INJ []string
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.REGNUM != "" {
		const prefix string = ",\"REGNUM\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.REGNUM))
	}
	if in.CODE_SH != "" {
		const prefix string = ",\"CODE_SH\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CODE_SH))
	}
	{
		const prefix string = ",\"DATE_INJ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DATE_INJ == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.DATE_INJ {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.String(string(v69))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode13(in *jlexer.Lexer, out *struct {
	PROT   string `xml:",omitempty" json:",omitempty"`
	D_PROT string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PROT":
			out.PROT = string(in.String())
		case "D_PROT":
			out.D_PROT = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode13(out *jwriter.Writer, in struct {
	PROT   string `xml:",omitempty" json:",omitempty"`
	D_PROT string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PROT != "" {
		const prefix string = ",\"PROT\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.PROT))
	}
	if in.D_PROT != "" {
		const prefix string = ",\"D_PROT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.D_PROT))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode12(in *jlexer.Lexer, out *struct {
	DIAG_DATE string `xml:",omitempty" json:",omitempty"`
	DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
	DIAG_CODE string `xml:",omitempty" json:",omitempty"`
	DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
	REC_RSLT  string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DIAG_DATE":
			out.DIAG_DATE = string(in.String())
		case "DIAG_TIP":
			out.DIAG_TIP = string(in.String())
		case "DIAG_CODE":
			out.DIAG_CODE = string(in.String())
		case "DIAG_RSLT":
			out.DIAG_RSLT = string(in.String())
		case "REC_RSLT":
			out.REC_RSLT = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode12(out *jwriter.Writer, in struct {
	DIAG_DATE string `xml:",omitempty" json:",omitempty"`
	DIAG_TIP  string `xml:",omitempty" json:",omitempty"`
	DIAG_CODE string `xml:",omitempty" json:",omitempty"`
	DIAG_RSLT string `xml:",omitempty" json:",omitempty"`
	REC_RSLT  string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DIAG_DATE != "" {
		const prefix string = ",\"DIAG_DATE\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DIAG_DATE))
	}
	if in.DIAG_TIP != "" {
		const prefix string = ",\"DIAG_TIP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DIAG_TIP))
	}
	if in.DIAG_CODE != "" {
		const prefix string = ",\"DIAG_CODE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DIAG_CODE))
	}
	if in.DIAG_RSLT != "" {
		const prefix string = ",\"DIAG_RSLT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DIAG_RSLT))
	}
	if in.REC_RSLT != "" {
		const prefix string = ",\"REC_RSLT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.REC_RSLT))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode7(in *jlexer.Lexer, out *struct {
	PR_CONS string `xml:",omitempty" json:",omitempty"`
	DT_CONS string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PR_CONS":
			out.PR_CONS = string(in.String())
		case "DT_CONS":
			out.DT_CONS = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode7(out *jwriter.Writer, in struct {
	PR_CONS string `xml:",omitempty" json:",omitempty"`
	DT_CONS string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PR_CONS != "" {
		const prefix string = ",\"PR_CONS\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.PR_CONS))
	}
	if in.DT_CONS != "" {
		const prefix string = ",\"DT_CONS\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DT_CONS))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode6(in *jlexer.Lexer, out *struct {
	NAPR_DATE string `xml:",omitempty" json:",omitempty"`
	NAPR_MO   string `xml:",omitempty" json:",omitempty"`
	NAPR_V    string `xml:",omitempty" json:",omitempty"`
	MET_ISSL  string `xml:",omitempty" json:",omitempty"`
	NAPR_USL  string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NAPR_DATE":
			out.NAPR_DATE = string(in.String())
		case "NAPR_MO":
			out.NAPR_MO = string(in.String())
		case "NAPR_V":
			out.NAPR_V = string(in.String())
		case "MET_ISSL":
			out.MET_ISSL = string(in.String())
		case "NAPR_USL":
			out.NAPR_USL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode6(out *jwriter.Writer, in struct {
	NAPR_DATE string `xml:",omitempty" json:",omitempty"`
	NAPR_MO   string `xml:",omitempty" json:",omitempty"`
	NAPR_V    string `xml:",omitempty" json:",omitempty"`
	MET_ISSL  string `xml:",omitempty" json:",omitempty"`
	NAPR_USL  string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NAPR_DATE != "" {
		const prefix string = ",\"NAPR_DATE\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.NAPR_DATE))
	}
	if in.NAPR_MO != "" {
		const prefix string = ",\"NAPR_MO\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAPR_MO))
	}
	if in.NAPR_V != "" {
		const prefix string = ",\"NAPR_V\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAPR_V))
	}
	if in.MET_ISSL != "" {
		const prefix string = ",\"MET_ISSL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MET_ISSL))
	}
	if in.NAPR_USL != "" {
		const prefix string = ",\"NAPR_USL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAPR_USL))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode5(in *jlexer.Lexer, out *struct {
	NAZ_N     string `xml:",omitempty" json:",omitempty"`
	NAZ_R     string `xml:",omitempty" json:",omitempty"`
	NAZ_SP    string `xml:",omitempty" json:",omitempty"`
	NAZ_V     string `xml:",omitempty" json:",omitempty"`
	NAZ_USL   string `xml:",omitempty" json:",omitempty"`
	NAPR_DATE string `xml:",omitempty" json:",omitempty"`
	NAPR_MO   string `xml:",omitempty" json:",omitempty"`
	NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
	NAZ_PK    string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NAZ_N":
			out.NAZ_N = string(in.String())
		case "NAZ_R":
			out.NAZ_R = string(in.String())
		case "NAZ_SP":
			out.NAZ_SP = string(in.String())
		case "NAZ_V":
			out.NAZ_V = string(in.String())
		case "NAZ_USL":
			out.NAZ_USL = string(in.String())
		case "NAPR_DATE":
			out.NAPR_DATE = string(in.String())
		case "NAPR_MO":
			out.NAPR_MO = string(in.String())
		case "NAZ_PMP":
			out.NAZ_PMP = string(in.String())
		case "NAZ_PK":
			out.NAZ_PK = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode5(out *jwriter.Writer, in struct {
	NAZ_N     string `xml:",omitempty" json:",omitempty"`
	NAZ_R     string `xml:",omitempty" json:",omitempty"`
	NAZ_SP    string `xml:",omitempty" json:",omitempty"`
	NAZ_V     string `xml:",omitempty" json:",omitempty"`
	NAZ_USL   string `xml:",omitempty" json:",omitempty"`
	NAPR_DATE string `xml:",omitempty" json:",omitempty"`
	NAPR_MO   string `xml:",omitempty" json:",omitempty"`
	NAZ_PMP   string `xml:",omitempty" json:",omitempty"`
	NAZ_PK    string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NAZ_N != "" {
		const prefix string = ",\"NAZ_N\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.NAZ_N))
	}
	if in.NAZ_R != "" {
		const prefix string = ",\"NAZ_R\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAZ_R))
	}
	if in.NAZ_SP != "" {
		const prefix string = ",\"NAZ_SP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAZ_SP))
	}
	if in.NAZ_V != "" {
		const prefix string = ",\"NAZ_V\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAZ_V))
	}
	if in.NAZ_USL != "" {
		const prefix string = ",\"NAZ_USL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAZ_USL))
	}
	if in.NAPR_DATE != "" {
		const prefix string = ",\"NAPR_DATE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAPR_DATE))
	}
	if in.NAPR_MO != "" {
		const prefix string = ",\"NAPR_MO\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAPR_MO))
	}
	if in.NAZ_PMP != "" {
		const prefix string = ",\"NAZ_PMP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAZ_PMP))
	}
	if in.NAZ_PK != "" {
		const prefix string = ",\"NAZ_PK\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NAZ_PK))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode4(in *jlexer.Lexer, out *struct {
	DS2      string `xml:",omitempty" json:",omitempty"`
	DS2_PR   string `xml:",omitempty" json:",omitempty"`
	PR_DS2_N string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DS2":
			out.DS2 = string(in.String())
		case "DS2_PR":
			out.DS2_PR = string(in.String())
		case "PR_DS2_N":
			out.PR_DS2_N = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode4(out *jwriter.Writer, in struct {
	DS2      string `xml:",omitempty" json:",omitempty"`
	DS2_PR   string `xml:",omitempty" json:",omitempty"`
	PR_DS2_N string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DS2 != "" {
		const prefix string = ",\"DS2\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DS2))
	}
	if in.DS2_PR != "" {
		const prefix string = ",\"DS2_PR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DS2_PR))
	}
	if in.PR_DS2_N != "" {
		const prefix string = ",\"PR_DS2_N\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PR_DS2_N))
	}
	out.RawByte('}')
}
func easyjson8d03ee45DecodeXmlParseInternalXmlParse4(in *jlexer.Lexer, out *Pacient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID_PAC":
			out.ID_PAC = string(in.String())
		case "VPOLIS":
			out.VPOLIS = string(in.String())
		case "SPOLIS":
			out.SPOLIS = string(in.String())
		case "NPOLIS":
			out.NPOLIS = string(in.String())
		case "ST_OKATO":
			out.ST_OKATO = string(in.String())
		case "SMO":
			out.SMO = string(in.String())
		case "SMO_OGRN":
			out.SMO_OGRN = string(in.String())
		case "SMO_OK":
			out.SMO_OK = string(in.String())
		case "SMO_NAM":
			out.SMO_NAM = string(in.String())
		case "INV":
			out.INV = string(in.String())
		case "MSE":
			out.MSE = string(in.String())
		case "NOVOR":
			out.NOVOR = string(in.String())
		case "VNOV_S":
			out.VNOV_S = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45EncodeXmlParseInternalXmlParse4(out *jwriter.Writer, in Pacient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID_PAC\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID_PAC))
	}
	{
		const prefix string = ",\"VPOLIS\":"
		out.RawString(prefix)
		out.String(string(in.VPOLIS))
	}
	if in.SPOLIS != "" {
		const prefix string = ",\"SPOLIS\":"
		out.RawString(prefix)
		out.String(string(in.SPOLIS))
	}
	{
		const prefix string = ",\"NPOLIS\":"
		out.RawString(prefix)
		out.String(string(in.NPOLIS))
	}
	if in.ST_OKATO != "" {
		const prefix string = ",\"ST_OKATO\":"
		out.RawString(prefix)
		out.String(string(in.ST_OKATO))
	}
	if in.SMO != "" {
		const prefix string = ",\"SMO\":"
		out.RawString(prefix)
		out.String(string(in.SMO))
	}
	if in.SMO_OGRN != "" {
		const prefix string = ",\"SMO_OGRN\":"
		out.RawString(prefix)
		out.String(string(in.SMO_OGRN))
	}
	if in.SMO_OK != "" {
		const prefix string = ",\"SMO_OK\":"
		out.RawString(prefix)
		out.String(string(in.SMO_OK))
	}
	if in.SMO_NAM != "" {
		const prefix string = ",\"SMO_NAM\":"
		out.RawString(prefix)
		out.String(string(in.SMO_NAM))
	}
	if in.INV != "" {
		const prefix string = ",\"INV\":"
		out.RawString(prefix)
		out.String(string(in.INV))
	}
	if in.MSE != "" {
		const prefix string = ",\"MSE\":"
		out.RawString(prefix)
		out.String(string(in.MSE))
	}
	{
		const prefix string = ",\"NOVOR\":"
		out.RawString(prefix)
		out.String(string(in.NOVOR))
	}
	if in.VNOV_S != "" {
		const prefix string = ",\"VNOV_S\":"
		out.RawString(prefix)
		out.String(string(in.VNOV_S))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pacient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d03ee45EncodeXmlParseInternalXmlParse4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pacient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d03ee45EncodeXmlParseInternalXmlParse4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pacient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d03ee45DecodeXmlParseInternalXmlParse4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pacient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d03ee45DecodeXmlParseInternalXmlParse4(l, v)
}
func easyjson8d03ee45DecodeXmlParseInternalXmlParse5(in *jlexer.Lexer, out *L) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ZGLV":
			easyjson8d03ee45Decode16(in, &out.ZGLV)
		case "PERS":
			if in.IsNull() {
				in.Skip()
				out.PERS = nil
			} else {
				in.Delim('[')
				if out.PERS == nil {
					if !in.IsDelim(']') {
						out.PERS = make([]struct {
							ID_PAC  string
							FAM     string `xml:",omitempty" json:",omitempty"`
							IM      string `xml:",omitempty" json:",omitempty"`
							OT      string `xml:",omitempty" json:",omitempty"`
							W       string
							DR      string
							DOST    []string
							TEL     string `xml:",omitempty" json:",omitempty"`
							FAM_P   string `xml:",omitempty" json:",omitempty"`
							IM_P    string `xml:",omitempty" json:",omitempty"`
							OT_P    string `xml:",omitempty" json:",omitempty"`
							W_P     string `xml:",omitempty" json:",omitempty"`
							DR_P    string `xml:",omitempty" json:",omitempty"`
							MR      string `xml:",omitempty" json:",omitempty"`
							DOCTYPE string `xml:",omitempty" json:",omitempty"`
							DOCSER  string `xml:",omitempty" json:",omitempty"`
							DOCNUM  string `xml:",omitempty" json:",omitempty"`
							DOCDATE string `xml:",omitempty" json:",omitempty"`
							DOCORG  string `xml:",omitempty" json:",omitempty"`
							SNILS   string `xml:",omitempty" json:",omitempty"`
							OKATOG  string `xml:",omitempty" json:",omitempty"`
							OKATOP  string `xml:",omitempty" json:",omitempty"`
							COMENTP string `xml:",omitempty" json:",omitempty"`
						}, 0, 0)
					} else {
						out.PERS = []struct {
							ID_PAC  string
							FAM     string `xml:",omitempty" json:",omitempty"`
							IM      string `xml:",omitempty" json:",omitempty"`
							OT      string `xml:",omitempty" json:",omitempty"`
							W       string
							DR      string
							DOST    []string
							TEL     string `xml:",omitempty" json:",omitempty"`
							FAM_P   string `xml:",omitempty" json:",omitempty"`
							IM_P    string `xml:",omitempty" json:",omitempty"`
							OT_P    string `xml:",omitempty" json:",omitempty"`
							W_P     string `xml:",omitempty" json:",omitempty"`
							DR_P    string `xml:",omitempty" json:",omitempty"`
							MR      string `xml:",omitempty" json:",omitempty"`
							DOCTYPE string `xml:",omitempty" json:",omitempty"`
							DOCSER  string `xml:",omitempty" json:",omitempty"`
							DOCNUM  string `xml:",omitempty" json:",omitempty"`
							DOCDATE string `xml:",omitempty" json:",omitempty"`
							DOCORG  string `xml:",omitempty" json:",omitempty"`
							SNILS   string `xml:",omitempty" json:",omitempty"`
							OKATOG  string `xml:",omitempty" json:",omitempty"`
							OKATOP  string `xml:",omitempty" json:",omitempty"`
							COMENTP string `xml:",omitempty" json:",omitempty"`
						}{}
					}
				} else {
					out.PERS = (out.PERS)[:0]
				}
				for !in.IsDelim(']') {
					var v70 struct {
						ID_PAC  string
						FAM     string `xml:",omitempty" json:",omitempty"`
						IM      string `xml:",omitempty" json:",omitempty"`
						OT      string `xml:",omitempty" json:",omitempty"`
						W       string
						DR      string
						DOST    []string
						TEL     string `xml:",omitempty" json:",omitempty"`
						FAM_P   string `xml:",omitempty" json:",omitempty"`
						IM_P    string `xml:",omitempty" json:",omitempty"`
						OT_P    string `xml:",omitempty" json:",omitempty"`
						W_P     string `xml:",omitempty" json:",omitempty"`
						DR_P    string `xml:",omitempty" json:",omitempty"`
						MR      string `xml:",omitempty" json:",omitempty"`
						DOCTYPE string `xml:",omitempty" json:",omitempty"`
						DOCSER  string `xml:",omitempty" json:",omitempty"`
						DOCNUM  string `xml:",omitempty" json:",omitempty"`
						DOCDATE string `xml:",omitempty" json:",omitempty"`
						DOCORG  string `xml:",omitempty" json:",omitempty"`
						SNILS   string `xml:",omitempty" json:",omitempty"`
						OKATOG  string `xml:",omitempty" json:",omitempty"`
						OKATOP  string `xml:",omitempty" json:",omitempty"`
						COMENTP string `xml:",omitempty" json:",omitempty"`
					}
					easyjson8d03ee45Decode17(in, &v70)
					out.PERS = append(out.PERS, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45EncodeXmlParseInternalXmlParse5(out *jwriter.Writer, in L) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ZGLV\":"
		out.RawString(prefix[1:])
		easyjson8d03ee45Encode16(out, in.ZGLV)
	}
	{
		const prefix string = ",\"PERS\":"
		out.RawString(prefix)
		if in.PERS == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v71, v72 := range in.PERS {
				if v71 > 0 {
					out.RawByte(',')
				}
				easyjson8d03ee45Encode17(out, v72)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v L) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d03ee45EncodeXmlParseInternalXmlParse5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v L) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d03ee45EncodeXmlParseInternalXmlParse5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *L) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d03ee45DecodeXmlParseInternalXmlParse5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *L) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d03ee45DecodeXmlParseInternalXmlParse5(l, v)
}
func easyjson8d03ee45Decode17(in *jlexer.Lexer, out *struct {
	ID_PAC  string
	FAM     string `xml:",omitempty" json:",omitempty"`
	IM      string `xml:",omitempty" json:",omitempty"`
	OT      string `xml:",omitempty" json:",omitempty"`
	W       string
	DR      string
	DOST    []string
	TEL     string `xml:",omitempty" json:",omitempty"`
	FAM_P   string `xml:",omitempty" json:",omitempty"`
	IM_P    string `xml:",omitempty" json:",omitempty"`
	OT_P    string `xml:",omitempty" json:",omitempty"`
	W_P     string `xml:",omitempty" json:",omitempty"`
	DR_P    string `xml:",omitempty" json:",omitempty"`
	MR      string `xml:",omitempty" json:",omitempty"`
	DOCTYPE string `xml:",omitempty" json:",omitempty"`
	DOCSER  string `xml:",omitempty" json:",omitempty"`
	DOCNUM  string `xml:",omitempty" json:",omitempty"`
	DOCDATE string `xml:",omitempty" json:",omitempty"`
	DOCORG  string `xml:",omitempty" json:",omitempty"`
	SNILS   string `xml:",omitempty" json:",omitempty"`
	OKATOG  string `xml:",omitempty" json:",omitempty"`
	OKATOP  string `xml:",omitempty" json:",omitempty"`
	COMENTP string `xml:",omitempty" json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID_PAC":
			out.ID_PAC = string(in.String())
		case "FAM":
			out.FAM = string(in.String())
		case "IM":
			out.IM = string(in.String())
		case "OT":
			out.OT = string(in.String())
		case "W":
			out.W = string(in.String())
		case "DR":
			out.DR = string(in.String())
		case "DOST":
			if in.IsNull() {
				in.Skip()
				out.DOST = nil
			} else {
				in.Delim('[')
				if out.DOST == nil {
					if !in.IsDelim(']') {
						out.DOST = make([]string, 0, 4)
					} else {
						out.DOST = []string{}
					}
				} else {
					out.DOST = (out.DOST)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.DOST = append(out.DOST, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TEL":
			out.TEL = string(in.String())
		case "FAM_P":
			out.FAM_P = string(in.String())
		case "IM_P":
			out.IM_P = string(in.String())
		case "OT_P":
			out.OT_P = string(in.String())
		case "W_P":
			out.W_P = string(in.String())
		case "DR_P":
			out.DR_P = string(in.String())
		case "MR":
			out.MR = string(in.String())
		case "DOCTYPE":
			out.DOCTYPE = string(in.String())
		case "DOCSER":
			out.DOCSER = string(in.String())
		case "DOCNUM":
			out.DOCNUM = string(in.String())
		case "DOCDATE":
			out.DOCDATE = string(in.String())
		case "DOCORG":
			out.DOCORG = string(in.String())
		case "SNILS":
			out.SNILS = string(in.String())
		case "OKATOG":
			out.OKATOG = string(in.String())
		case "OKATOP":
			out.OKATOP = string(in.String())
		case "COMENTP":
			out.COMENTP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode17(out *jwriter.Writer, in struct {
	ID_PAC  string
	FAM     string `xml:",omitempty" json:",omitempty"`
	IM      string `xml:",omitempty" json:",omitempty"`
	OT      string `xml:",omitempty" json:",omitempty"`
	W       string
	DR      string
	DOST    []string
	TEL     string `xml:",omitempty" json:",omitempty"`
	FAM_P   string `xml:",omitempty" json:",omitempty"`
	IM_P    string `xml:",omitempty" json:",omitempty"`
	OT_P    string `xml:",omitempty" json:",omitempty"`
	W_P     string `xml:",omitempty" json:",omitempty"`
	DR_P    string `xml:",omitempty" json:",omitempty"`
	MR      string `xml:",omitempty" json:",omitempty"`
	DOCTYPE string `xml:",omitempty" json:",omitempty"`
	DOCSER  string `xml:",omitempty" json:",omitempty"`
	DOCNUM  string `xml:",omitempty" json:",omitempty"`
	DOCDATE string `xml:",omitempty" json:",omitempty"`
	DOCORG  string `xml:",omitempty" json:",omitempty"`
	SNILS   string `xml:",omitempty" json:",omitempty"`
	OKATOG  string `xml:",omitempty" json:",omitempty"`
	OKATOP  string `xml:",omitempty" json:",omitempty"`
	COMENTP string `xml:",omitempty" json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID_PAC\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID_PAC))
	}
	if in.FAM != "" {
		const prefix string = ",\"FAM\":"
		out.RawString(prefix)
		out.String(string(in.FAM))
	}
	if in.IM != "" {
		const prefix string = ",\"IM\":"
		out.RawString(prefix)
		out.String(string(in.IM))
	}
	if in.OT != "" {
		const prefix string = ",\"OT\":"
		out.RawString(prefix)
		out.String(string(in.OT))
	}
	{
		const prefix string = ",\"W\":"
		out.RawString(prefix)
		out.String(string(in.W))
	}
	{
		const prefix string = ",\"DR\":"
		out.RawString(prefix)
		out.String(string(in.DR))
	}
	{
		const prefix string = ",\"DOST\":"
		out.RawString(prefix)
		if in.DOST == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.DOST {
				if v74 > 0 {
					out.RawByte(',')
				}
				out.String(string(v75))
			}
			out.RawByte(']')
		}
	}
	if in.TEL != "" {
		const prefix string = ",\"TEL\":"
		out.RawString(prefix)
		out.String(string(in.TEL))
	}
	if in.FAM_P != "" {
		const prefix string = ",\"FAM_P\":"
		out.RawString(prefix)
		out.String(string(in.FAM_P))
	}
	if in.IM_P != "" {
		const prefix string = ",\"IM_P\":"
		out.RawString(prefix)
		out.String(string(in.IM_P))
	}
	if in.OT_P != "" {
		const prefix string = ",\"OT_P\":"
		out.RawString(prefix)
		out.String(string(in.OT_P))
	}
	if in.W_P != "" {
		const prefix string = ",\"W_P\":"
		out.RawString(prefix)
		out.String(string(in.W_P))
	}
	if in.DR_P != "" {
		const prefix string = ",\"DR_P\":"
		out.RawString(prefix)
		out.String(string(in.DR_P))
	}
	if in.MR != "" {
		const prefix string = ",\"MR\":"
		out.RawString(prefix)
		out.String(string(in.MR))
	}
	if in.DOCTYPE != "" {
		const prefix string = ",\"DOCTYPE\":"
		out.RawString(prefix)
		out.String(string(in.DOCTYPE))
	}
	if in.DOCSER != "" {
		const prefix string = ",\"DOCSER\":"
		out.RawString(prefix)
		out.String(string(in.DOCSER))
	}
	if in.DOCNUM != "" {
		const prefix string = ",\"DOCNUM\":"
		out.RawString(prefix)
		out.String(string(in.DOCNUM))
	}
	if in.DOCDATE != "" {
		const prefix string = ",\"DOCDATE\":"
		out.RawString(prefix)
		out.String(string(in.DOCDATE))
	}
	if in.DOCORG != "" {
		const prefix string = ",\"DOCORG\":"
		out.RawString(prefix)
		out.String(string(in.DOCORG))
	}
	if in.SNILS != "" {
		const prefix string = ",\"SNILS\":"
		out.RawString(prefix)
		out.String(string(in.SNILS))
	}
	if in.OKATOG != "" {
		const prefix string = ",\"OKATOG\":"
		out.RawString(prefix)
		out.String(string(in.OKATOG))
	}
	if in.OKATOP != "" {
		const prefix string = ",\"OKATOP\":"
		out.RawString(prefix)
		out.String(string(in.OKATOP))
	}
	if in.COMENTP != "" {
		const prefix string = ",\"COMENTP\":"
		out.RawString(prefix)
		out.String(string(in.COMENTP))
	}
	out.RawByte('}')
}
func easyjson8d03ee45Decode16(in *jlexer.Lexer, out *struct {
	VERSION   string
	DATA      string
	FILENAME  string
	FILENAME1 string
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VERSION":
			out.VERSION = string(in.String())
		case "DATA":
			out.DATA = string(in.String())
		case "FILENAME":
			out.FILENAME = string(in.String())
		case "FILENAME1":
			out.FILENAME1 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d03ee45Encode16(out *jwriter.Writer, in struct {
	VERSION   string
	DATA      string
	FILENAME  string
	FILENAME1 string
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"VERSION\":"
		out.RawString(prefix[1:])
		out.String(string(in.VERSION))
	}
	{
		const prefix string = ",\"DATA\":"
		out.RawString(prefix)
		out.String(string(in.DATA))
	}
	{
		const prefix string = ",\"FILENAME\":"
		out.RawString(prefix)
		out.String(string(in.FILENAME))
	}
	{
		const prefix string = ",\"FILENAME1\":"
		out.RawString(prefix)
		out.String(string(in.FILENAME1))
	}
	out.RawByte('}')
}
